*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 02.12.2019 at 11:50:34
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_DCITM...................................*
FORM GET_DATA_ZHMS_VW_DCITM.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_DCITM WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_DCITM .
ZHMS_VW_DCITM-MANDT =
ZHMS_TB_DCITM-MANDT .
ZHMS_VW_DCITM-CODMP =
ZHMS_TB_DCITM-CODMP .
ZHMS_VW_DCITM-MNEUMFIL =
ZHMS_TB_DCITM-MNEUMFIL .
<VIM_TOTAL_STRUC> = ZHMS_VW_DCITM.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_DCITM .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_DCITM.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_DCITM-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_DCITM WHERE
  CODMP = ZHMS_VW_DCITM-CODMP AND
  MNEUMFIL = ZHMS_VW_DCITM-MNEUMFIL .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_DCITM .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_DCITM WHERE
  CODMP = ZHMS_VW_DCITM-CODMP AND
  MNEUMFIL = ZHMS_VW_DCITM-MNEUMFIL .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_DCITM.
    ENDIF.
ZHMS_TB_DCITM-MANDT =
ZHMS_VW_DCITM-MANDT .
ZHMS_TB_DCITM-CODMP =
ZHMS_VW_DCITM-CODMP .
ZHMS_TB_DCITM-MNEUMFIL =
ZHMS_VW_DCITM-MNEUMFIL .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_DCITM ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_DCITM .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_DCITM-UPD_FLAG,
STATUS_ZHMS_VW_DCITM-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_DCITM.
  SELECT SINGLE * FROM ZHMS_TB_DCITM WHERE
CODMP = ZHMS_VW_DCITM-CODMP AND
MNEUMFIL = ZHMS_VW_DCITM-MNEUMFIL .
ZHMS_VW_DCITM-MANDT =
ZHMS_TB_DCITM-MANDT .
ZHMS_VW_DCITM-CODMP =
ZHMS_TB_DCITM-CODMP .
ZHMS_VW_DCITM-MNEUMFIL =
ZHMS_TB_DCITM-MNEUMFIL .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_DCITM USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_DCITM-CODMP TO
ZHMS_TB_DCITM-CODMP .
MOVE ZHMS_VW_DCITM-MNEUMFIL TO
ZHMS_TB_DCITM-MNEUMFIL .
MOVE ZHMS_VW_DCITM-MANDT TO
ZHMS_TB_DCITM-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_DCITM'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_DCITM TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_DCITM'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_EVENTS..................................*
FORM GET_DATA_ZHMS_VW_EVENTS.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_EVENTS WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_EVENTS .
ZHMS_VW_EVENTS-MANDT =
ZHMS_TB_EVENTS-MANDT .
ZHMS_VW_EVENTS-NATDC =
ZHMS_TB_EVENTS-NATDC .
ZHMS_VW_EVENTS-TYPED =
ZHMS_TB_EVENTS-TYPED .
ZHMS_VW_EVENTS-LOCTP =
ZHMS_TB_EVENTS-LOCTP .
ZHMS_VW_EVENTS-EVENT =
ZHMS_TB_EVENTS-EVENT .
ZHMS_VW_EVENTS-DIREC =
ZHMS_TB_EVENTS-DIREC .
    SELECT SINGLE * FROM ZHMS_TX_EVENTS WHERE
NATDC = ZHMS_TB_EVENTS-NATDC AND
TYPED = ZHMS_TB_EVENTS-TYPED AND
LOCTP = ZHMS_TB_EVENTS-LOCTP AND
EVENT = ZHMS_TB_EVENTS-EVENT AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_EVENTS-DENOM =
ZHMS_TX_EVENTS-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_EVENTS.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_EVENTS .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_EVENTS.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_EVENTS-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EVENTS WHERE
  NATDC = ZHMS_VW_EVENTS-NATDC AND
  TYPED = ZHMS_VW_EVENTS-TYPED AND
  LOCTP = ZHMS_VW_EVENTS-LOCTP AND
  EVENT = ZHMS_VW_EVENTS-EVENT .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_EVENTS .
    ENDIF.
    DELETE FROM ZHMS_TX_EVENTS WHERE
    NATDC = ZHMS_TB_EVENTS-NATDC AND
    TYPED = ZHMS_TB_EVENTS-TYPED AND
    LOCTP = ZHMS_TB_EVENTS-LOCTP AND
    EVENT = ZHMS_TB_EVENTS-EVENT .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EVENTS WHERE
  NATDC = ZHMS_VW_EVENTS-NATDC AND
  TYPED = ZHMS_VW_EVENTS-TYPED AND
  LOCTP = ZHMS_VW_EVENTS-LOCTP AND
  EVENT = ZHMS_VW_EVENTS-EVENT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_EVENTS.
    ENDIF.
ZHMS_TB_EVENTS-MANDT =
ZHMS_VW_EVENTS-MANDT .
ZHMS_TB_EVENTS-NATDC =
ZHMS_VW_EVENTS-NATDC .
ZHMS_TB_EVENTS-TYPED =
ZHMS_VW_EVENTS-TYPED .
ZHMS_TB_EVENTS-LOCTP =
ZHMS_VW_EVENTS-LOCTP .
ZHMS_TB_EVENTS-EVENT =
ZHMS_VW_EVENTS-EVENT .
ZHMS_TB_EVENTS-DIREC =
ZHMS_VW_EVENTS-DIREC .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_EVENTS ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_EVENTS .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_EVENTS WHERE
    NATDC = ZHMS_TB_EVENTS-NATDC AND
    TYPED = ZHMS_TB_EVENTS-TYPED AND
    LOCTP = ZHMS_TB_EVENTS-LOCTP AND
    EVENT = ZHMS_TB_EVENTS-EVENT AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_EVENTS.
ZHMS_TX_EVENTS-NATDC =
ZHMS_TB_EVENTS-NATDC .
ZHMS_TX_EVENTS-TYPED =
ZHMS_TB_EVENTS-TYPED .
ZHMS_TX_EVENTS-LOCTP =
ZHMS_TB_EVENTS-LOCTP .
ZHMS_TX_EVENTS-EVENT =
ZHMS_TB_EVENTS-EVENT .
ZHMS_TX_EVENTS-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_EVENTS-DENOM =
ZHMS_VW_EVENTS-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_EVENTS ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_EVENTS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_EVENTS-UPD_FLAG,
STATUS_ZHMS_VW_EVENTS-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_EVENTS.
  SELECT SINGLE * FROM ZHMS_TB_EVENTS WHERE
NATDC = ZHMS_VW_EVENTS-NATDC AND
TYPED = ZHMS_VW_EVENTS-TYPED AND
LOCTP = ZHMS_VW_EVENTS-LOCTP AND
EVENT = ZHMS_VW_EVENTS-EVENT .
ZHMS_VW_EVENTS-MANDT =
ZHMS_TB_EVENTS-MANDT .
ZHMS_VW_EVENTS-NATDC =
ZHMS_TB_EVENTS-NATDC .
ZHMS_VW_EVENTS-TYPED =
ZHMS_TB_EVENTS-TYPED .
ZHMS_VW_EVENTS-LOCTP =
ZHMS_TB_EVENTS-LOCTP .
ZHMS_VW_EVENTS-EVENT =
ZHMS_TB_EVENTS-EVENT .
ZHMS_VW_EVENTS-DIREC =
ZHMS_TB_EVENTS-DIREC .
    SELECT SINGLE * FROM ZHMS_TX_EVENTS WHERE
NATDC = ZHMS_TB_EVENTS-NATDC AND
TYPED = ZHMS_TB_EVENTS-TYPED AND
LOCTP = ZHMS_TB_EVENTS-LOCTP AND
EVENT = ZHMS_TB_EVENTS-EVENT AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_EVENTS-DENOM =
ZHMS_TX_EVENTS-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_EVENTS-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_EVENTS USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_EVENTS-NATDC TO
ZHMS_TB_EVENTS-NATDC .
MOVE ZHMS_VW_EVENTS-TYPED TO
ZHMS_TB_EVENTS-TYPED .
MOVE ZHMS_VW_EVENTS-LOCTP TO
ZHMS_TB_EVENTS-LOCTP .
MOVE ZHMS_VW_EVENTS-EVENT TO
ZHMS_TB_EVENTS-EVENT .
MOVE ZHMS_VW_EVENTS-MANDT TO
ZHMS_TB_EVENTS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_EVENTS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_EVENTS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_EVENTS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_EVENTS-NATDC TO
ZHMS_TX_EVENTS-NATDC .
MOVE ZHMS_TB_EVENTS-TYPED TO
ZHMS_TX_EVENTS-TYPED .
MOVE ZHMS_TB_EVENTS-LOCTP TO
ZHMS_TX_EVENTS-LOCTP .
MOVE ZHMS_TB_EVENTS-EVENT TO
ZHMS_TX_EVENTS-EVENT .
MOVE SY-LANGU TO
ZHMS_TX_EVENTS-SPRAS .
MOVE ZHMS_VW_EVENTS-MANDT TO
ZHMS_TX_EVENTS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_EVENTS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_EVENTS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_EVENTS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_EVVL_ATR................................*
FORM GET_DATA_ZHMS_VW_EVVL_ATR.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_EVVL_ATR WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_EVVL_ATR .
ZHMS_VW_EVVL_ATR-MANDT =
ZHMS_TB_EVVL_ATR-MANDT .
ZHMS_VW_EVVL_ATR-NATDC =
ZHMS_TB_EVVL_ATR-NATDC .
ZHMS_VW_EVVL_ATR-TYPED =
ZHMS_TB_EVVL_ATR-TYPED .
ZHMS_VW_EVVL_ATR-LOCTP =
ZHMS_TB_EVVL_ATR-LOCTP .
ZHMS_VW_EVVL_ATR-EVENT =
ZHMS_TB_EVVL_ATR-EVENT .
ZHMS_VW_EVVL_ATR-VERSN =
ZHMS_TB_EVVL_ATR-VERSN .
ZHMS_VW_EVVL_ATR-CODLY =
ZHMS_TB_EVVL_ATR-CODLY .
ZHMS_VW_EVVL_ATR-CODAT =
ZHMS_TB_EVVL_ATR-CODAT .
ZHMS_VW_EVVL_ATR-FIELD =
ZHMS_TB_EVVL_ATR-FIELD .
ZHMS_VW_EVVL_ATR-MNEUM =
ZHMS_TB_EVVL_ATR-MNEUM .
ZHMS_VW_EVVL_ATR-VALUE =
ZHMS_TB_EVVL_ATR-VALUE .
<VIM_TOTAL_STRUC> = ZHMS_VW_EVVL_ATR.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_EVVL_ATR .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_EVVL_ATR.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_EVVL_ATR-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EVVL_ATR WHERE
  NATDC = ZHMS_VW_EVVL_ATR-NATDC AND
  TYPED = ZHMS_VW_EVVL_ATR-TYPED AND
  LOCTP = ZHMS_VW_EVVL_ATR-LOCTP AND
  EVENT = ZHMS_VW_EVVL_ATR-EVENT AND
  VERSN = ZHMS_VW_EVVL_ATR-VERSN AND
  CODLY = ZHMS_VW_EVVL_ATR-CODLY AND
  CODAT = ZHMS_VW_EVVL_ATR-CODAT .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_EVVL_ATR .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EVVL_ATR WHERE
  NATDC = ZHMS_VW_EVVL_ATR-NATDC AND
  TYPED = ZHMS_VW_EVVL_ATR-TYPED AND
  LOCTP = ZHMS_VW_EVVL_ATR-LOCTP AND
  EVENT = ZHMS_VW_EVVL_ATR-EVENT AND
  VERSN = ZHMS_VW_EVVL_ATR-VERSN AND
  CODLY = ZHMS_VW_EVVL_ATR-CODLY AND
  CODAT = ZHMS_VW_EVVL_ATR-CODAT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_EVVL_ATR.
    ENDIF.
ZHMS_TB_EVVL_ATR-MANDT =
ZHMS_VW_EVVL_ATR-MANDT .
ZHMS_TB_EVVL_ATR-NATDC =
ZHMS_VW_EVVL_ATR-NATDC .
ZHMS_TB_EVVL_ATR-TYPED =
ZHMS_VW_EVVL_ATR-TYPED .
ZHMS_TB_EVVL_ATR-LOCTP =
ZHMS_VW_EVVL_ATR-LOCTP .
ZHMS_TB_EVVL_ATR-EVENT =
ZHMS_VW_EVVL_ATR-EVENT .
ZHMS_TB_EVVL_ATR-VERSN =
ZHMS_VW_EVVL_ATR-VERSN .
ZHMS_TB_EVVL_ATR-CODLY =
ZHMS_VW_EVVL_ATR-CODLY .
ZHMS_TB_EVVL_ATR-CODAT =
ZHMS_VW_EVVL_ATR-CODAT .
ZHMS_TB_EVVL_ATR-FIELD =
ZHMS_VW_EVVL_ATR-FIELD .
ZHMS_TB_EVVL_ATR-MNEUM =
ZHMS_VW_EVVL_ATR-MNEUM .
ZHMS_TB_EVVL_ATR-VALUE =
ZHMS_VW_EVVL_ATR-VALUE .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_EVVL_ATR ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_EVVL_ATR .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_EVVL_ATR-UPD_FLAG,
STATUS_ZHMS_VW_EVVL_ATR-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_EVVL_ATR.
  SELECT SINGLE * FROM ZHMS_TB_EVVL_ATR WHERE
NATDC = ZHMS_VW_EVVL_ATR-NATDC AND
TYPED = ZHMS_VW_EVVL_ATR-TYPED AND
LOCTP = ZHMS_VW_EVVL_ATR-LOCTP AND
EVENT = ZHMS_VW_EVVL_ATR-EVENT AND
VERSN = ZHMS_VW_EVVL_ATR-VERSN AND
CODLY = ZHMS_VW_EVVL_ATR-CODLY AND
CODAT = ZHMS_VW_EVVL_ATR-CODAT .
ZHMS_VW_EVVL_ATR-MANDT =
ZHMS_TB_EVVL_ATR-MANDT .
ZHMS_VW_EVVL_ATR-NATDC =
ZHMS_TB_EVVL_ATR-NATDC .
ZHMS_VW_EVVL_ATR-TYPED =
ZHMS_TB_EVVL_ATR-TYPED .
ZHMS_VW_EVVL_ATR-LOCTP =
ZHMS_TB_EVVL_ATR-LOCTP .
ZHMS_VW_EVVL_ATR-EVENT =
ZHMS_TB_EVVL_ATR-EVENT .
ZHMS_VW_EVVL_ATR-VERSN =
ZHMS_TB_EVVL_ATR-VERSN .
ZHMS_VW_EVVL_ATR-CODLY =
ZHMS_TB_EVVL_ATR-CODLY .
ZHMS_VW_EVVL_ATR-CODAT =
ZHMS_TB_EVVL_ATR-CODAT .
ZHMS_VW_EVVL_ATR-FIELD =
ZHMS_TB_EVVL_ATR-FIELD .
ZHMS_VW_EVVL_ATR-MNEUM =
ZHMS_TB_EVVL_ATR-MNEUM .
ZHMS_VW_EVVL_ATR-VALUE =
ZHMS_TB_EVVL_ATR-VALUE .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_EVVL_ATR USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_EVVL_ATR-NATDC TO
ZHMS_TB_EVVL_ATR-NATDC .
MOVE ZHMS_VW_EVVL_ATR-TYPED TO
ZHMS_TB_EVVL_ATR-TYPED .
MOVE ZHMS_VW_EVVL_ATR-LOCTP TO
ZHMS_TB_EVVL_ATR-LOCTP .
MOVE ZHMS_VW_EVVL_ATR-EVENT TO
ZHMS_TB_EVVL_ATR-EVENT .
MOVE ZHMS_VW_EVVL_ATR-VERSN TO
ZHMS_TB_EVVL_ATR-VERSN .
MOVE ZHMS_VW_EVVL_ATR-CODLY TO
ZHMS_TB_EVVL_ATR-CODLY .
MOVE ZHMS_VW_EVVL_ATR-CODAT TO
ZHMS_TB_EVVL_ATR-CODAT .
MOVE ZHMS_VW_EVVL_ATR-MANDT TO
ZHMS_TB_EVVL_ATR-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_EVVL_ATR'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_EVVL_ATR TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_EVVL_ATR'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_EVV_LAYT................................*
FORM GET_DATA_ZHMS_VW_EVV_LAYT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_EVV_LAYT WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_EVV_LAYT .
ZHMS_VW_EVV_LAYT-MANDT =
ZHMS_TB_EVV_LAYT-MANDT .
ZHMS_VW_EVV_LAYT-NATDC =
ZHMS_TB_EVV_LAYT-NATDC .
ZHMS_VW_EVV_LAYT-TYPED =
ZHMS_TB_EVV_LAYT-TYPED .
ZHMS_VW_EVV_LAYT-LOCTP =
ZHMS_TB_EVV_LAYT-LOCTP .
ZHMS_VW_EVV_LAYT-EVENT =
ZHMS_TB_EVV_LAYT-EVENT .
ZHMS_VW_EVV_LAYT-VERSN =
ZHMS_TB_EVV_LAYT-VERSN .
ZHMS_VW_EVV_LAYT-CODLY =
ZHMS_TB_EVV_LAYT-CODLY .
ZHMS_VW_EVV_LAYT-FIELD =
ZHMS_TB_EVV_LAYT-FIELD .
ZHMS_VW_EVV_LAYT-MNEUM =
ZHMS_TB_EVV_LAYT-MNEUM .
ZHMS_VW_EVV_LAYT-ATROL =
ZHMS_TB_EVV_LAYT-ATROL .
    SELECT SINGLE * FROM ZHMS_TX_EVV_LAYT WHERE
NATDC = ZHMS_TB_EVV_LAYT-NATDC AND
TYPED = ZHMS_TB_EVV_LAYT-TYPED AND
LOCTP = ZHMS_TB_EVV_LAYT-LOCTP AND
EVENT = ZHMS_TB_EVV_LAYT-EVENT AND
VERSN = ZHMS_TB_EVV_LAYT-VERSN AND
CODLY = ZHMS_TB_EVV_LAYT-CODLY AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_EVV_LAYT-DENOF =
ZHMS_TX_EVV_LAYT-DENOF .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_EVV_LAYT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_EVV_LAYT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_EVV_LAYT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_EVV_LAYT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EVV_LAYT WHERE
  NATDC = ZHMS_VW_EVV_LAYT-NATDC AND
  TYPED = ZHMS_VW_EVV_LAYT-TYPED AND
  LOCTP = ZHMS_VW_EVV_LAYT-LOCTP AND
  EVENT = ZHMS_VW_EVV_LAYT-EVENT AND
  VERSN = ZHMS_VW_EVV_LAYT-VERSN AND
  CODLY = ZHMS_VW_EVV_LAYT-CODLY .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_EVV_LAYT .
    ENDIF.
    DELETE FROM ZHMS_TX_EVV_LAYT WHERE
    NATDC = ZHMS_TB_EVV_LAYT-NATDC AND
    TYPED = ZHMS_TB_EVV_LAYT-TYPED AND
    LOCTP = ZHMS_TB_EVV_LAYT-LOCTP AND
    EVENT = ZHMS_TB_EVV_LAYT-EVENT AND
    VERSN = ZHMS_TB_EVV_LAYT-VERSN AND
    CODLY = ZHMS_TB_EVV_LAYT-CODLY .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EVV_LAYT WHERE
  NATDC = ZHMS_VW_EVV_LAYT-NATDC AND
  TYPED = ZHMS_VW_EVV_LAYT-TYPED AND
  LOCTP = ZHMS_VW_EVV_LAYT-LOCTP AND
  EVENT = ZHMS_VW_EVV_LAYT-EVENT AND
  VERSN = ZHMS_VW_EVV_LAYT-VERSN AND
  CODLY = ZHMS_VW_EVV_LAYT-CODLY .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_EVV_LAYT.
    ENDIF.
ZHMS_TB_EVV_LAYT-MANDT =
ZHMS_VW_EVV_LAYT-MANDT .
ZHMS_TB_EVV_LAYT-NATDC =
ZHMS_VW_EVV_LAYT-NATDC .
ZHMS_TB_EVV_LAYT-TYPED =
ZHMS_VW_EVV_LAYT-TYPED .
ZHMS_TB_EVV_LAYT-LOCTP =
ZHMS_VW_EVV_LAYT-LOCTP .
ZHMS_TB_EVV_LAYT-EVENT =
ZHMS_VW_EVV_LAYT-EVENT .
ZHMS_TB_EVV_LAYT-VERSN =
ZHMS_VW_EVV_LAYT-VERSN .
ZHMS_TB_EVV_LAYT-CODLY =
ZHMS_VW_EVV_LAYT-CODLY .
ZHMS_TB_EVV_LAYT-FIELD =
ZHMS_VW_EVV_LAYT-FIELD .
ZHMS_TB_EVV_LAYT-MNEUM =
ZHMS_VW_EVV_LAYT-MNEUM .
ZHMS_TB_EVV_LAYT-ATROL =
ZHMS_VW_EVV_LAYT-ATROL .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_EVV_LAYT ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_EVV_LAYT .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_EVV_LAYT WHERE
    NATDC = ZHMS_TB_EVV_LAYT-NATDC AND
    TYPED = ZHMS_TB_EVV_LAYT-TYPED AND
    LOCTP = ZHMS_TB_EVV_LAYT-LOCTP AND
    EVENT = ZHMS_TB_EVV_LAYT-EVENT AND
    VERSN = ZHMS_TB_EVV_LAYT-VERSN AND
    CODLY = ZHMS_TB_EVV_LAYT-CODLY AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_EVV_LAYT.
ZHMS_TX_EVV_LAYT-NATDC =
ZHMS_TB_EVV_LAYT-NATDC .
ZHMS_TX_EVV_LAYT-TYPED =
ZHMS_TB_EVV_LAYT-TYPED .
ZHMS_TX_EVV_LAYT-LOCTP =
ZHMS_TB_EVV_LAYT-LOCTP .
ZHMS_TX_EVV_LAYT-EVENT =
ZHMS_TB_EVV_LAYT-EVENT .
ZHMS_TX_EVV_LAYT-VERSN =
ZHMS_TB_EVV_LAYT-VERSN .
ZHMS_TX_EVV_LAYT-CODLY =
ZHMS_TB_EVV_LAYT-CODLY .
ZHMS_TX_EVV_LAYT-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_EVV_LAYT-DENOF =
ZHMS_VW_EVV_LAYT-DENOF .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_EVV_LAYT ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_EVV_LAYT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_EVV_LAYT-UPD_FLAG,
STATUS_ZHMS_VW_EVV_LAYT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_EVV_LAYT.
  SELECT SINGLE * FROM ZHMS_TB_EVV_LAYT WHERE
NATDC = ZHMS_VW_EVV_LAYT-NATDC AND
TYPED = ZHMS_VW_EVV_LAYT-TYPED AND
LOCTP = ZHMS_VW_EVV_LAYT-LOCTP AND
EVENT = ZHMS_VW_EVV_LAYT-EVENT AND
VERSN = ZHMS_VW_EVV_LAYT-VERSN AND
CODLY = ZHMS_VW_EVV_LAYT-CODLY .
ZHMS_VW_EVV_LAYT-MANDT =
ZHMS_TB_EVV_LAYT-MANDT .
ZHMS_VW_EVV_LAYT-NATDC =
ZHMS_TB_EVV_LAYT-NATDC .
ZHMS_VW_EVV_LAYT-TYPED =
ZHMS_TB_EVV_LAYT-TYPED .
ZHMS_VW_EVV_LAYT-LOCTP =
ZHMS_TB_EVV_LAYT-LOCTP .
ZHMS_VW_EVV_LAYT-EVENT =
ZHMS_TB_EVV_LAYT-EVENT .
ZHMS_VW_EVV_LAYT-VERSN =
ZHMS_TB_EVV_LAYT-VERSN .
ZHMS_VW_EVV_LAYT-CODLY =
ZHMS_TB_EVV_LAYT-CODLY .
ZHMS_VW_EVV_LAYT-FIELD =
ZHMS_TB_EVV_LAYT-FIELD .
ZHMS_VW_EVV_LAYT-MNEUM =
ZHMS_TB_EVV_LAYT-MNEUM .
ZHMS_VW_EVV_LAYT-ATROL =
ZHMS_TB_EVV_LAYT-ATROL .
    SELECT SINGLE * FROM ZHMS_TX_EVV_LAYT WHERE
NATDC = ZHMS_TB_EVV_LAYT-NATDC AND
TYPED = ZHMS_TB_EVV_LAYT-TYPED AND
LOCTP = ZHMS_TB_EVV_LAYT-LOCTP AND
EVENT = ZHMS_TB_EVV_LAYT-EVENT AND
VERSN = ZHMS_TB_EVV_LAYT-VERSN AND
CODLY = ZHMS_TB_EVV_LAYT-CODLY AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_EVV_LAYT-DENOF =
ZHMS_TX_EVV_LAYT-DENOF .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_EVV_LAYT-DENOF .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_EVV_LAYT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_EVV_LAYT-NATDC TO
ZHMS_TB_EVV_LAYT-NATDC .
MOVE ZHMS_VW_EVV_LAYT-TYPED TO
ZHMS_TB_EVV_LAYT-TYPED .
MOVE ZHMS_VW_EVV_LAYT-LOCTP TO
ZHMS_TB_EVV_LAYT-LOCTP .
MOVE ZHMS_VW_EVV_LAYT-EVENT TO
ZHMS_TB_EVV_LAYT-EVENT .
MOVE ZHMS_VW_EVV_LAYT-VERSN TO
ZHMS_TB_EVV_LAYT-VERSN .
MOVE ZHMS_VW_EVV_LAYT-CODLY TO
ZHMS_TB_EVV_LAYT-CODLY .
MOVE ZHMS_VW_EVV_LAYT-MANDT TO
ZHMS_TB_EVV_LAYT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_EVV_LAYT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_EVV_LAYT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_EVV_LAYT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_EVV_LAYT-NATDC TO
ZHMS_TX_EVV_LAYT-NATDC .
MOVE ZHMS_TB_EVV_LAYT-TYPED TO
ZHMS_TX_EVV_LAYT-TYPED .
MOVE ZHMS_TB_EVV_LAYT-LOCTP TO
ZHMS_TX_EVV_LAYT-LOCTP .
MOVE ZHMS_TB_EVV_LAYT-EVENT TO
ZHMS_TX_EVV_LAYT-EVENT .
MOVE ZHMS_TB_EVV_LAYT-VERSN TO
ZHMS_TX_EVV_LAYT-VERSN .
MOVE ZHMS_TB_EVV_LAYT-CODLY TO
ZHMS_TX_EVV_LAYT-CODLY .
MOVE SY-LANGU TO
ZHMS_TX_EVV_LAYT-SPRAS .
MOVE ZHMS_VW_EVV_LAYT-MANDT TO
ZHMS_TX_EVV_LAYT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_EVV_LAYT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_EVV_LAYT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_EVV_LAYT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_EV_FLOW.................................*
FORM GET_DATA_ZHMS_VW_EV_FLOW.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_EV_FLOW WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_EV_FLOW .
ZHMS_VW_EV_FLOW-MANDT =
ZHMS_TB_EV_FLOW-MANDT .
ZHMS_VW_EV_FLOW-NATDC =
ZHMS_TB_EV_FLOW-NATDC .
ZHMS_VW_EV_FLOW-TYPED =
ZHMS_TB_EV_FLOW-TYPED .
ZHMS_VW_EV_FLOW-LOCTP =
ZHMS_TB_EV_FLOW-LOCTP .
ZHMS_VW_EV_FLOW-EVENT =
ZHMS_TB_EV_FLOW-EVENT .
ZHMS_VW_EV_FLOW-FLOWD =
ZHMS_TB_EV_FLOW-FLOWD .
ZHMS_VW_EV_FLOW-METPR =
ZHMS_TB_EV_FLOW-METPR .
ZHMS_VW_EV_FLOW-VLDCD =
ZHMS_TB_EV_FLOW-VLDCD .
ZHMS_VW_EV_FLOW-CODMP =
ZHMS_TB_EV_FLOW-CODMP .
ZHMS_VW_EV_FLOW-FUNCT =
ZHMS_TB_EV_FLOW-FUNCT .
ZHMS_VW_EV_FLOW-SCENA_C =
ZHMS_TB_EV_FLOW-SCENA_C .
    SELECT SINGLE * FROM ZHMS_TX_EV_FLOW WHERE
NATDC = ZHMS_TB_EV_FLOW-NATDC AND
TYPED = ZHMS_TB_EV_FLOW-TYPED AND
LOCTP = ZHMS_TB_EV_FLOW-LOCTP AND
EVENT = ZHMS_TB_EV_FLOW-EVENT AND
FLOWD = ZHMS_TB_EV_FLOW-FLOWD AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_EV_FLOW-DENOM =
ZHMS_TX_EV_FLOW-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_EV_FLOW.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_EV_FLOW .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_EV_FLOW.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_EV_FLOW-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EV_FLOW WHERE
  NATDC = ZHMS_VW_EV_FLOW-NATDC AND
  TYPED = ZHMS_VW_EV_FLOW-TYPED AND
  LOCTP = ZHMS_VW_EV_FLOW-LOCTP AND
  EVENT = ZHMS_VW_EV_FLOW-EVENT AND
  FLOWD = ZHMS_VW_EV_FLOW-FLOWD .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_EV_FLOW .
    ENDIF.
    DELETE FROM ZHMS_TX_EV_FLOW WHERE
    NATDC = ZHMS_TB_EV_FLOW-NATDC AND
    TYPED = ZHMS_TB_EV_FLOW-TYPED AND
    LOCTP = ZHMS_TB_EV_FLOW-LOCTP AND
    EVENT = ZHMS_TB_EV_FLOW-EVENT AND
    FLOWD = ZHMS_TB_EV_FLOW-FLOWD .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EV_FLOW WHERE
  NATDC = ZHMS_VW_EV_FLOW-NATDC AND
  TYPED = ZHMS_VW_EV_FLOW-TYPED AND
  LOCTP = ZHMS_VW_EV_FLOW-LOCTP AND
  EVENT = ZHMS_VW_EV_FLOW-EVENT AND
  FLOWD = ZHMS_VW_EV_FLOW-FLOWD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_EV_FLOW.
    ENDIF.
ZHMS_TB_EV_FLOW-MANDT =
ZHMS_VW_EV_FLOW-MANDT .
ZHMS_TB_EV_FLOW-NATDC =
ZHMS_VW_EV_FLOW-NATDC .
ZHMS_TB_EV_FLOW-TYPED =
ZHMS_VW_EV_FLOW-TYPED .
ZHMS_TB_EV_FLOW-LOCTP =
ZHMS_VW_EV_FLOW-LOCTP .
ZHMS_TB_EV_FLOW-EVENT =
ZHMS_VW_EV_FLOW-EVENT .
ZHMS_TB_EV_FLOW-FLOWD =
ZHMS_VW_EV_FLOW-FLOWD .
ZHMS_TB_EV_FLOW-METPR =
ZHMS_VW_EV_FLOW-METPR .
ZHMS_TB_EV_FLOW-VLDCD =
ZHMS_VW_EV_FLOW-VLDCD .
ZHMS_TB_EV_FLOW-CODMP =
ZHMS_VW_EV_FLOW-CODMP .
ZHMS_TB_EV_FLOW-FUNCT =
ZHMS_VW_EV_FLOW-FUNCT .
ZHMS_TB_EV_FLOW-SCENA_C =
ZHMS_VW_EV_FLOW-SCENA_C .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_EV_FLOW ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_EV_FLOW .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_EV_FLOW WHERE
    NATDC = ZHMS_TB_EV_FLOW-NATDC AND
    TYPED = ZHMS_TB_EV_FLOW-TYPED AND
    LOCTP = ZHMS_TB_EV_FLOW-LOCTP AND
    EVENT = ZHMS_TB_EV_FLOW-EVENT AND
    FLOWD = ZHMS_TB_EV_FLOW-FLOWD AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_EV_FLOW.
ZHMS_TX_EV_FLOW-NATDC =
ZHMS_TB_EV_FLOW-NATDC .
ZHMS_TX_EV_FLOW-TYPED =
ZHMS_TB_EV_FLOW-TYPED .
ZHMS_TX_EV_FLOW-LOCTP =
ZHMS_TB_EV_FLOW-LOCTP .
ZHMS_TX_EV_FLOW-EVENT =
ZHMS_TB_EV_FLOW-EVENT .
ZHMS_TX_EV_FLOW-FLOWD =
ZHMS_TB_EV_FLOW-FLOWD .
ZHMS_TX_EV_FLOW-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_EV_FLOW-DENOM =
ZHMS_VW_EV_FLOW-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_EV_FLOW ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_EV_FLOW .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_EV_FLOW-UPD_FLAG,
STATUS_ZHMS_VW_EV_FLOW-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_EV_FLOW.
  SELECT SINGLE * FROM ZHMS_TB_EV_FLOW WHERE
NATDC = ZHMS_VW_EV_FLOW-NATDC AND
TYPED = ZHMS_VW_EV_FLOW-TYPED AND
LOCTP = ZHMS_VW_EV_FLOW-LOCTP AND
EVENT = ZHMS_VW_EV_FLOW-EVENT AND
FLOWD = ZHMS_VW_EV_FLOW-FLOWD .
ZHMS_VW_EV_FLOW-MANDT =
ZHMS_TB_EV_FLOW-MANDT .
ZHMS_VW_EV_FLOW-NATDC =
ZHMS_TB_EV_FLOW-NATDC .
ZHMS_VW_EV_FLOW-TYPED =
ZHMS_TB_EV_FLOW-TYPED .
ZHMS_VW_EV_FLOW-LOCTP =
ZHMS_TB_EV_FLOW-LOCTP .
ZHMS_VW_EV_FLOW-EVENT =
ZHMS_TB_EV_FLOW-EVENT .
ZHMS_VW_EV_FLOW-FLOWD =
ZHMS_TB_EV_FLOW-FLOWD .
ZHMS_VW_EV_FLOW-METPR =
ZHMS_TB_EV_FLOW-METPR .
ZHMS_VW_EV_FLOW-VLDCD =
ZHMS_TB_EV_FLOW-VLDCD .
ZHMS_VW_EV_FLOW-CODMP =
ZHMS_TB_EV_FLOW-CODMP .
ZHMS_VW_EV_FLOW-FUNCT =
ZHMS_TB_EV_FLOW-FUNCT .
ZHMS_VW_EV_FLOW-SCENA_C =
ZHMS_TB_EV_FLOW-SCENA_C .
    SELECT SINGLE * FROM ZHMS_TX_EV_FLOW WHERE
NATDC = ZHMS_TB_EV_FLOW-NATDC AND
TYPED = ZHMS_TB_EV_FLOW-TYPED AND
LOCTP = ZHMS_TB_EV_FLOW-LOCTP AND
EVENT = ZHMS_TB_EV_FLOW-EVENT AND
FLOWD = ZHMS_TB_EV_FLOW-FLOWD AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_EV_FLOW-DENOM =
ZHMS_TX_EV_FLOW-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_EV_FLOW-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_EV_FLOW USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_EV_FLOW-NATDC TO
ZHMS_TB_EV_FLOW-NATDC .
MOVE ZHMS_VW_EV_FLOW-TYPED TO
ZHMS_TB_EV_FLOW-TYPED .
MOVE ZHMS_VW_EV_FLOW-LOCTP TO
ZHMS_TB_EV_FLOW-LOCTP .
MOVE ZHMS_VW_EV_FLOW-EVENT TO
ZHMS_TB_EV_FLOW-EVENT .
MOVE ZHMS_VW_EV_FLOW-FLOWD TO
ZHMS_TB_EV_FLOW-FLOWD .
MOVE ZHMS_VW_EV_FLOW-MANDT TO
ZHMS_TB_EV_FLOW-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_EV_FLOW'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_EV_FLOW TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_EV_FLOW'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_EV_FLOW-NATDC TO
ZHMS_TX_EV_FLOW-NATDC .
MOVE ZHMS_TB_EV_FLOW-TYPED TO
ZHMS_TX_EV_FLOW-TYPED .
MOVE ZHMS_TB_EV_FLOW-LOCTP TO
ZHMS_TX_EV_FLOW-LOCTP .
MOVE ZHMS_TB_EV_FLOW-EVENT TO
ZHMS_TX_EV_FLOW-EVENT .
MOVE ZHMS_TB_EV_FLOW-FLOWD TO
ZHMS_TX_EV_FLOW-FLOWD .
MOVE SY-LANGU TO
ZHMS_TX_EV_FLOW-SPRAS .
MOVE ZHMS_VW_EV_FLOW-MANDT TO
ZHMS_TX_EV_FLOW-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_EV_FLOW'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_EV_FLOW TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_EV_FLOW'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_EV_VRS..................................*
FORM GET_DATA_ZHMS_VW_EV_VRS.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_EV_VRS WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_EV_VRS .
ZHMS_VW_EV_VRS-MANDT =
ZHMS_TB_EV_VRS-MANDT .
ZHMS_VW_EV_VRS-NATDC =
ZHMS_TB_EV_VRS-NATDC .
ZHMS_VW_EV_VRS-TYPED =
ZHMS_TB_EV_VRS-TYPED .
ZHMS_VW_EV_VRS-LOCTP =
ZHMS_TB_EV_VRS-LOCTP .
ZHMS_VW_EV_VRS-EVENT =
ZHMS_TB_EV_VRS-EVENT .
ZHMS_VW_EV_VRS-VERSN =
ZHMS_TB_EV_VRS-VERSN .
ZHMS_VW_EV_VRS-ATIVO =
ZHMS_TB_EV_VRS-ATIVO .
<VIM_TOTAL_STRUC> = ZHMS_VW_EV_VRS.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_EV_VRS .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_EV_VRS.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_EV_VRS-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EV_VRS WHERE
  NATDC = ZHMS_VW_EV_VRS-NATDC AND
  TYPED = ZHMS_VW_EV_VRS-TYPED AND
  LOCTP = ZHMS_VW_EV_VRS-LOCTP AND
  EVENT = ZHMS_VW_EV_VRS-EVENT AND
  VERSN = ZHMS_VW_EV_VRS-VERSN .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_EV_VRS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_EV_VRS WHERE
  NATDC = ZHMS_VW_EV_VRS-NATDC AND
  TYPED = ZHMS_VW_EV_VRS-TYPED AND
  LOCTP = ZHMS_VW_EV_VRS-LOCTP AND
  EVENT = ZHMS_VW_EV_VRS-EVENT AND
  VERSN = ZHMS_VW_EV_VRS-VERSN .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_EV_VRS.
    ENDIF.
ZHMS_TB_EV_VRS-MANDT =
ZHMS_VW_EV_VRS-MANDT .
ZHMS_TB_EV_VRS-NATDC =
ZHMS_VW_EV_VRS-NATDC .
ZHMS_TB_EV_VRS-TYPED =
ZHMS_VW_EV_VRS-TYPED .
ZHMS_TB_EV_VRS-LOCTP =
ZHMS_VW_EV_VRS-LOCTP .
ZHMS_TB_EV_VRS-EVENT =
ZHMS_VW_EV_VRS-EVENT .
ZHMS_TB_EV_VRS-VERSN =
ZHMS_VW_EV_VRS-VERSN .
ZHMS_TB_EV_VRS-ATIVO =
ZHMS_VW_EV_VRS-ATIVO .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_EV_VRS ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_EV_VRS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_EV_VRS-UPD_FLAG,
STATUS_ZHMS_VW_EV_VRS-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_EV_VRS.
  SELECT SINGLE * FROM ZHMS_TB_EV_VRS WHERE
NATDC = ZHMS_VW_EV_VRS-NATDC AND
TYPED = ZHMS_VW_EV_VRS-TYPED AND
LOCTP = ZHMS_VW_EV_VRS-LOCTP AND
EVENT = ZHMS_VW_EV_VRS-EVENT AND
VERSN = ZHMS_VW_EV_VRS-VERSN .
ZHMS_VW_EV_VRS-MANDT =
ZHMS_TB_EV_VRS-MANDT .
ZHMS_VW_EV_VRS-NATDC =
ZHMS_TB_EV_VRS-NATDC .
ZHMS_VW_EV_VRS-TYPED =
ZHMS_TB_EV_VRS-TYPED .
ZHMS_VW_EV_VRS-LOCTP =
ZHMS_TB_EV_VRS-LOCTP .
ZHMS_VW_EV_VRS-EVENT =
ZHMS_TB_EV_VRS-EVENT .
ZHMS_VW_EV_VRS-VERSN =
ZHMS_TB_EV_VRS-VERSN .
ZHMS_VW_EV_VRS-ATIVO =
ZHMS_TB_EV_VRS-ATIVO .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_EV_VRS USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_EV_VRS-NATDC TO
ZHMS_TB_EV_VRS-NATDC .
MOVE ZHMS_VW_EV_VRS-TYPED TO
ZHMS_TB_EV_VRS-TYPED .
MOVE ZHMS_VW_EV_VRS-LOCTP TO
ZHMS_TB_EV_VRS-LOCTP .
MOVE ZHMS_VW_EV_VRS-EVENT TO
ZHMS_TB_EV_VRS-EVENT .
MOVE ZHMS_VW_EV_VRS-VERSN TO
ZHMS_TB_EV_VRS-VERSN .
MOVE ZHMS_VW_EV_VRS-MANDT TO
ZHMS_TB_EV_VRS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_EV_VRS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_EV_VRS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_EV_VRS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_FILDCITM................................*
FORM GET_DATA_ZHMS_VW_FILDCITM.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_FILDCITM WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_FILDCITM .
ZHMS_VW_FILDCITM-MANDT =
ZHMS_TB_FILDCITM-MANDT .
ZHMS_VW_FILDCITM-CODMP =
ZHMS_TB_FILDCITM-CODMP .
ZHMS_VW_FILDCITM-DENOM =
ZHMS_TB_FILDCITM-DENOM .
ZHMS_VW_FILDCITM-MNEUMPAI =
ZHMS_TB_FILDCITM-MNEUMPAI .
ZHMS_VW_FILDCITM-MNEUMVAL =
ZHMS_TB_FILDCITM-MNEUMVAL .
<VIM_TOTAL_STRUC> = ZHMS_VW_FILDCITM.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_FILDCITM .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_FILDCITM.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_FILDCITM-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_FILDCITM WHERE
  CODMP = ZHMS_VW_FILDCITM-CODMP .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_FILDCITM .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_FILDCITM WHERE
  CODMP = ZHMS_VW_FILDCITM-CODMP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_FILDCITM.
    ENDIF.
ZHMS_TB_FILDCITM-MANDT =
ZHMS_VW_FILDCITM-MANDT .
ZHMS_TB_FILDCITM-CODMP =
ZHMS_VW_FILDCITM-CODMP .
ZHMS_TB_FILDCITM-DENOM =
ZHMS_VW_FILDCITM-DENOM .
ZHMS_TB_FILDCITM-MNEUMPAI =
ZHMS_VW_FILDCITM-MNEUMPAI .
ZHMS_TB_FILDCITM-MNEUMVAL =
ZHMS_VW_FILDCITM-MNEUMVAL .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_FILDCITM ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_FILDCITM .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_FILDCITM-UPD_FLAG,
STATUS_ZHMS_VW_FILDCITM-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_FILDCITM.
  SELECT SINGLE * FROM ZHMS_TB_FILDCITM WHERE
CODMP = ZHMS_VW_FILDCITM-CODMP .
ZHMS_VW_FILDCITM-MANDT =
ZHMS_TB_FILDCITM-MANDT .
ZHMS_VW_FILDCITM-CODMP =
ZHMS_TB_FILDCITM-CODMP .
ZHMS_VW_FILDCITM-DENOM =
ZHMS_TB_FILDCITM-DENOM .
ZHMS_VW_FILDCITM-MNEUMPAI =
ZHMS_TB_FILDCITM-MNEUMPAI .
ZHMS_VW_FILDCITM-MNEUMVAL =
ZHMS_TB_FILDCITM-MNEUMVAL .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_FILDCITM USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_FILDCITM-CODMP TO
ZHMS_TB_FILDCITM-CODMP .
MOVE ZHMS_VW_FILDCITM-MANDT TO
ZHMS_TB_FILDCITM-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_FILDCITM'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_FILDCITM TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_FILDCITM'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_GATE....................................*
FORM GET_DATA_ZHMS_VW_GATE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_GATE WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_GATE .
ZHMS_VW_GATE-MANDT =
ZHMS_TB_GATE-MANDT .
ZHMS_VW_GATE-GATE =
ZHMS_TB_GATE-GATE .
ZHMS_VW_GATE-DEFAU =
ZHMS_TB_GATE-DEFAU .
    SELECT SINGLE * FROM ZHMS_TX_GATE WHERE
GATE = ZHMS_TB_GATE-GATE AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_GATE-DENOM =
ZHMS_TX_GATE-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_GATE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_GATE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_GATE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_GATE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GATE WHERE
  GATE = ZHMS_VW_GATE-GATE .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_GATE .
    ENDIF.
    DELETE FROM ZHMS_TX_GATE WHERE
    GATE = ZHMS_TB_GATE-GATE .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GATE WHERE
  GATE = ZHMS_VW_GATE-GATE .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_GATE.
    ENDIF.
ZHMS_TB_GATE-MANDT =
ZHMS_VW_GATE-MANDT .
ZHMS_TB_GATE-GATE =
ZHMS_VW_GATE-GATE .
ZHMS_TB_GATE-DEFAU =
ZHMS_VW_GATE-DEFAU .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_GATE ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_GATE .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_GATE WHERE
    GATE = ZHMS_TB_GATE-GATE AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_GATE.
ZHMS_TX_GATE-GATE =
ZHMS_TB_GATE-GATE .
ZHMS_TX_GATE-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_GATE-DENOM =
ZHMS_VW_GATE-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_GATE ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_GATE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_GATE-UPD_FLAG,
STATUS_ZHMS_VW_GATE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_GATE.
  SELECT SINGLE * FROM ZHMS_TB_GATE WHERE
GATE = ZHMS_VW_GATE-GATE .
ZHMS_VW_GATE-MANDT =
ZHMS_TB_GATE-MANDT .
ZHMS_VW_GATE-GATE =
ZHMS_TB_GATE-GATE .
ZHMS_VW_GATE-DEFAU =
ZHMS_TB_GATE-DEFAU .
    SELECT SINGLE * FROM ZHMS_TX_GATE WHERE
GATE = ZHMS_TB_GATE-GATE AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_GATE-DENOM =
ZHMS_TX_GATE-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_GATE-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_GATE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_GATE-GATE TO
ZHMS_TB_GATE-GATE .
MOVE ZHMS_VW_GATE-MANDT TO
ZHMS_TB_GATE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_GATE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_GATE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_GATE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_GATE-GATE TO
ZHMS_TX_GATE-GATE .
MOVE SY-LANGU TO
ZHMS_TX_GATE-SPRAS .
MOVE ZHMS_VW_GATE-MANDT TO
ZHMS_TX_GATE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_GATE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_GATE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_GATE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_GATEMNEU................................*
FORM GET_DATA_ZHMS_VW_GATEMNEU.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_GATEMNEU WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_GATEMNEU .
ZHMS_VW_GATEMNEU-MANDT =
ZHMS_TB_GATEMNEU-MANDT .
ZHMS_VW_GATEMNEU-GATE =
ZHMS_TB_GATEMNEU-GATE .
ZHMS_VW_GATEMNEU-SEQNR =
ZHMS_TB_GATEMNEU-SEQNR .
ZHMS_VW_GATEMNEU-OBRIG =
ZHMS_TB_GATEMNEU-OBRIG .
ZHMS_VW_GATEMNEU-MNEUM =
ZHMS_TB_GATEMNEU-MNEUM .
    SELECT SINGLE * FROM ZHMS_TX_GATEMNEU WHERE
GATE = ZHMS_TB_GATEMNEU-GATE AND
SEQNR = ZHMS_TB_GATEMNEU-SEQNR AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_GATEMNEU-DENOM =
ZHMS_TX_GATEMNEU-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_GATEMNEU.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_GATEMNEU .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_GATEMNEU.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_GATEMNEU-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GATEMNEU WHERE
  GATE = ZHMS_VW_GATEMNEU-GATE AND
  SEQNR = ZHMS_VW_GATEMNEU-SEQNR .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_GATEMNEU .
    ENDIF.
    DELETE FROM ZHMS_TX_GATEMNEU WHERE
    GATE = ZHMS_TB_GATEMNEU-GATE AND
    SEQNR = ZHMS_TB_GATEMNEU-SEQNR .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GATEMNEU WHERE
  GATE = ZHMS_VW_GATEMNEU-GATE AND
  SEQNR = ZHMS_VW_GATEMNEU-SEQNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_GATEMNEU.
    ENDIF.
ZHMS_TB_GATEMNEU-MANDT =
ZHMS_VW_GATEMNEU-MANDT .
ZHMS_TB_GATEMNEU-GATE =
ZHMS_VW_GATEMNEU-GATE .
ZHMS_TB_GATEMNEU-SEQNR =
ZHMS_VW_GATEMNEU-SEQNR .
ZHMS_TB_GATEMNEU-OBRIG =
ZHMS_VW_GATEMNEU-OBRIG .
ZHMS_TB_GATEMNEU-MNEUM =
ZHMS_VW_GATEMNEU-MNEUM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_GATEMNEU ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_GATEMNEU .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_GATEMNEU WHERE
    GATE = ZHMS_TB_GATEMNEU-GATE AND
    SEQNR = ZHMS_TB_GATEMNEU-SEQNR AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_GATEMNEU.
ZHMS_TX_GATEMNEU-GATE =
ZHMS_TB_GATEMNEU-GATE .
ZHMS_TX_GATEMNEU-SEQNR =
ZHMS_TB_GATEMNEU-SEQNR .
ZHMS_TX_GATEMNEU-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_GATEMNEU-DENOM =
ZHMS_VW_GATEMNEU-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_GATEMNEU ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_GATEMNEU .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_GATEMNEU-UPD_FLAG,
STATUS_ZHMS_VW_GATEMNEU-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_GATEMNEU.
  SELECT SINGLE * FROM ZHMS_TB_GATEMNEU WHERE
GATE = ZHMS_VW_GATEMNEU-GATE AND
SEQNR = ZHMS_VW_GATEMNEU-SEQNR .
ZHMS_VW_GATEMNEU-MANDT =
ZHMS_TB_GATEMNEU-MANDT .
ZHMS_VW_GATEMNEU-GATE =
ZHMS_TB_GATEMNEU-GATE .
ZHMS_VW_GATEMNEU-SEQNR =
ZHMS_TB_GATEMNEU-SEQNR .
ZHMS_VW_GATEMNEU-OBRIG =
ZHMS_TB_GATEMNEU-OBRIG .
ZHMS_VW_GATEMNEU-MNEUM =
ZHMS_TB_GATEMNEU-MNEUM .
    SELECT SINGLE * FROM ZHMS_TX_GATEMNEU WHERE
GATE = ZHMS_TB_GATEMNEU-GATE AND
SEQNR = ZHMS_TB_GATEMNEU-SEQNR AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_GATEMNEU-DENOM =
ZHMS_TX_GATEMNEU-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_GATEMNEU-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_GATEMNEU USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_GATEMNEU-GATE TO
ZHMS_TB_GATEMNEU-GATE .
MOVE ZHMS_VW_GATEMNEU-SEQNR TO
ZHMS_TB_GATEMNEU-SEQNR .
MOVE ZHMS_VW_GATEMNEU-MANDT TO
ZHMS_TB_GATEMNEU-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_GATEMNEU'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_GATEMNEU TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_GATEMNEU'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_GATEMNEU-GATE TO
ZHMS_TX_GATEMNEU-GATE .
MOVE ZHMS_TB_GATEMNEU-SEQNR TO
ZHMS_TX_GATEMNEU-SEQNR .
MOVE SY-LANGU TO
ZHMS_TX_GATEMNEU-SPRAS .
MOVE ZHMS_VW_GATEMNEU-MANDT TO
ZHMS_TX_GATEMNEU-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_GATEMNEU'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_GATEMNEU TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_GATEMNEU'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_GATEOBS.................................*
FORM GET_DATA_ZHMS_VW_GATEOBS.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_GATEOBS WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_GATEOBS .
ZHMS_VW_GATEOBS-MANDT =
ZHMS_TB_GATEOBS-MANDT .
ZHMS_VW_GATEOBS-GATE =
ZHMS_TB_GATEOBS-GATE .
ZHMS_VW_GATEOBS-SPRAS =
ZHMS_TB_GATEOBS-SPRAS .
ZHMS_VW_GATEOBS-SEQNR =
ZHMS_TB_GATEOBS-SEQNR .
ZHMS_VW_GATEOBS-OBSER =
ZHMS_TB_GATEOBS-OBSER .
<VIM_TOTAL_STRUC> = ZHMS_VW_GATEOBS.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_GATEOBS .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_GATEOBS.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_GATEOBS-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GATEOBS WHERE
  GATE = ZHMS_VW_GATEOBS-GATE AND
  SPRAS = ZHMS_VW_GATEOBS-SPRAS AND
  SEQNR = ZHMS_VW_GATEOBS-SEQNR .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_GATEOBS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GATEOBS WHERE
  GATE = ZHMS_VW_GATEOBS-GATE AND
  SPRAS = ZHMS_VW_GATEOBS-SPRAS AND
  SEQNR = ZHMS_VW_GATEOBS-SEQNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_GATEOBS.
    ENDIF.
ZHMS_TB_GATEOBS-MANDT =
ZHMS_VW_GATEOBS-MANDT .
ZHMS_TB_GATEOBS-GATE =
ZHMS_VW_GATEOBS-GATE .
ZHMS_TB_GATEOBS-SPRAS =
ZHMS_VW_GATEOBS-SPRAS .
ZHMS_TB_GATEOBS-SEQNR =
ZHMS_VW_GATEOBS-SEQNR .
ZHMS_TB_GATEOBS-OBSER =
ZHMS_VW_GATEOBS-OBSER .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_GATEOBS ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_GATEOBS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_GATEOBS-UPD_FLAG,
STATUS_ZHMS_VW_GATEOBS-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_GATEOBS.
  SELECT SINGLE * FROM ZHMS_TB_GATEOBS WHERE
GATE = ZHMS_VW_GATEOBS-GATE AND
SPRAS = ZHMS_VW_GATEOBS-SPRAS AND
SEQNR = ZHMS_VW_GATEOBS-SEQNR .
ZHMS_VW_GATEOBS-MANDT =
ZHMS_TB_GATEOBS-MANDT .
ZHMS_VW_GATEOBS-GATE =
ZHMS_TB_GATEOBS-GATE .
ZHMS_VW_GATEOBS-SPRAS =
ZHMS_TB_GATEOBS-SPRAS .
ZHMS_VW_GATEOBS-SEQNR =
ZHMS_TB_GATEOBS-SEQNR .
ZHMS_VW_GATEOBS-OBSER =
ZHMS_TB_GATEOBS-OBSER .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_GATEOBS USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_GATEOBS-GATE TO
ZHMS_TB_GATEOBS-GATE .
MOVE ZHMS_VW_GATEOBS-SPRAS TO
ZHMS_TB_GATEOBS-SPRAS .
MOVE ZHMS_VW_GATEOBS-SEQNR TO
ZHMS_TB_GATEOBS-SEQNR .
MOVE ZHMS_VW_GATEOBS-MANDT TO
ZHMS_TB_GATEOBS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_GATEOBS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_GATEOBS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_GATEOBS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_GRPFLD..................................*
FORM GET_DATA_ZHMS_VW_GRPFLD.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_GRPFLD WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_GRPFLD .
ZHMS_VW_GRPFLD-MANDT =
ZHMS_TB_GRPFLD-MANDT .
ZHMS_VW_GRPFLD-CODGF =
ZHMS_TB_GRPFLD-CODGF .
    SELECT SINGLE * FROM ZHMS_TX_GRPFLD WHERE
CODGF = ZHMS_TB_GRPFLD-CODGF AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_GRPFLD-DENOM =
ZHMS_TX_GRPFLD-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_GRPFLD.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_GRPFLD .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_GRPFLD.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_GRPFLD-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GRPFLD WHERE
  CODGF = ZHMS_VW_GRPFLD-CODGF .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_GRPFLD .
    ENDIF.
    DELETE FROM ZHMS_TX_GRPFLD WHERE
    CODGF = ZHMS_TB_GRPFLD-CODGF .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GRPFLD WHERE
  CODGF = ZHMS_VW_GRPFLD-CODGF .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_GRPFLD.
    ENDIF.
ZHMS_TB_GRPFLD-MANDT =
ZHMS_VW_GRPFLD-MANDT .
ZHMS_TB_GRPFLD-CODGF =
ZHMS_VW_GRPFLD-CODGF .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_GRPFLD ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_GRPFLD .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_GRPFLD WHERE
    CODGF = ZHMS_TB_GRPFLD-CODGF AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_GRPFLD.
ZHMS_TX_GRPFLD-CODGF =
ZHMS_TB_GRPFLD-CODGF .
ZHMS_TX_GRPFLD-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_GRPFLD-DENOM =
ZHMS_VW_GRPFLD-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_GRPFLD ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_GRPFLD .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_GRPFLD-UPD_FLAG,
STATUS_ZHMS_VW_GRPFLD-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_GRPFLD.
  SELECT SINGLE * FROM ZHMS_TB_GRPFLD WHERE
CODGF = ZHMS_VW_GRPFLD-CODGF .
ZHMS_VW_GRPFLD-MANDT =
ZHMS_TB_GRPFLD-MANDT .
ZHMS_VW_GRPFLD-CODGF =
ZHMS_TB_GRPFLD-CODGF .
    SELECT SINGLE * FROM ZHMS_TX_GRPFLD WHERE
CODGF = ZHMS_TB_GRPFLD-CODGF AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_GRPFLD-DENOM =
ZHMS_TX_GRPFLD-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_GRPFLD-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_GRPFLD USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_GRPFLD-CODGF TO
ZHMS_TB_GRPFLD-CODGF .
MOVE ZHMS_VW_GRPFLD-MANDT TO
ZHMS_TB_GRPFLD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_GRPFLD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_GRPFLD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_GRPFLD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_GRPFLD-CODGF TO
ZHMS_TX_GRPFLD-CODGF .
MOVE SY-LANGU TO
ZHMS_TX_GRPFLD-SPRAS .
MOVE ZHMS_VW_GRPFLD-MANDT TO
ZHMS_TX_GRPFLD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_GRPFLD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_GRPFLD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_GRPFLD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_GRPFLD_S................................*
FORM GET_DATA_ZHMS_VW_GRPFLD_S.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_GRPFLD_S WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_GRPFLD_S .
ZHMS_VW_GRPFLD_S-MANDT =
ZHMS_TB_GRPFLD_S-MANDT .
ZHMS_VW_GRPFLD_S-CODGF =
ZHMS_TB_GRPFLD_S-CODGF .
ZHMS_VW_GRPFLD_S-SEQNR =
ZHMS_TB_GRPFLD_S-SEQNR .
ZHMS_VW_GRPFLD_S-TABSS =
ZHMS_TB_GRPFLD_S-TABSS .
ZHMS_VW_GRPFLD_S-FLDSS =
ZHMS_TB_GRPFLD_S-FLDSS .
ZHMS_VW_GRPFLD_S-TYPEF =
ZHMS_TB_GRPFLD_S-TYPEF .
<VIM_TOTAL_STRUC> = ZHMS_VW_GRPFLD_S.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_GRPFLD_S .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_GRPFLD_S.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_GRPFLD_S-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GRPFLD_S WHERE
  CODGF = ZHMS_VW_GRPFLD_S-CODGF AND
  SEQNR = ZHMS_VW_GRPFLD_S-SEQNR AND
  TABSS = ZHMS_VW_GRPFLD_S-TABSS AND
  FLDSS = ZHMS_VW_GRPFLD_S-FLDSS .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_GRPFLD_S .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_GRPFLD_S WHERE
  CODGF = ZHMS_VW_GRPFLD_S-CODGF AND
  SEQNR = ZHMS_VW_GRPFLD_S-SEQNR AND
  TABSS = ZHMS_VW_GRPFLD_S-TABSS AND
  FLDSS = ZHMS_VW_GRPFLD_S-FLDSS .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_GRPFLD_S.
    ENDIF.
ZHMS_TB_GRPFLD_S-MANDT =
ZHMS_VW_GRPFLD_S-MANDT .
ZHMS_TB_GRPFLD_S-CODGF =
ZHMS_VW_GRPFLD_S-CODGF .
ZHMS_TB_GRPFLD_S-SEQNR =
ZHMS_VW_GRPFLD_S-SEQNR .
ZHMS_TB_GRPFLD_S-TABSS =
ZHMS_VW_GRPFLD_S-TABSS .
ZHMS_TB_GRPFLD_S-FLDSS =
ZHMS_VW_GRPFLD_S-FLDSS .
ZHMS_TB_GRPFLD_S-TYPEF =
ZHMS_VW_GRPFLD_S-TYPEF .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_GRPFLD_S ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_GRPFLD_S .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_GRPFLD_S-UPD_FLAG,
STATUS_ZHMS_VW_GRPFLD_S-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_GRPFLD_S.
  SELECT SINGLE * FROM ZHMS_TB_GRPFLD_S WHERE
CODGF = ZHMS_VW_GRPFLD_S-CODGF AND
SEQNR = ZHMS_VW_GRPFLD_S-SEQNR AND
TABSS = ZHMS_VW_GRPFLD_S-TABSS AND
FLDSS = ZHMS_VW_GRPFLD_S-FLDSS .
ZHMS_VW_GRPFLD_S-MANDT =
ZHMS_TB_GRPFLD_S-MANDT .
ZHMS_VW_GRPFLD_S-CODGF =
ZHMS_TB_GRPFLD_S-CODGF .
ZHMS_VW_GRPFLD_S-SEQNR =
ZHMS_TB_GRPFLD_S-SEQNR .
ZHMS_VW_GRPFLD_S-TABSS =
ZHMS_TB_GRPFLD_S-TABSS .
ZHMS_VW_GRPFLD_S-FLDSS =
ZHMS_TB_GRPFLD_S-FLDSS .
ZHMS_VW_GRPFLD_S-TYPEF =
ZHMS_TB_GRPFLD_S-TYPEF .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_GRPFLD_S USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_GRPFLD_S-CODGF TO
ZHMS_TB_GRPFLD_S-CODGF .
MOVE ZHMS_VW_GRPFLD_S-SEQNR TO
ZHMS_TB_GRPFLD_S-SEQNR .
MOVE ZHMS_VW_GRPFLD_S-TABSS TO
ZHMS_TB_GRPFLD_S-TABSS .
MOVE ZHMS_VW_GRPFLD_S-FLDSS TO
ZHMS_TB_GRPFLD_S-FLDSS .
MOVE ZHMS_VW_GRPFLD_S-MANDT TO
ZHMS_TB_GRPFLD_S-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_GRPFLD_S'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_GRPFLD_S TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_GRPFLD_S'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MAPCONEC................................*
FORM GET_DATA_ZHMS_VW_MAPCONEC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MAPCONEC WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MAPCONEC .
ZHMS_VW_MAPCONEC-MANDT =
ZHMS_TB_MAPCONEC-MANDT .
ZHMS_VW_MAPCONEC-NATDC =
ZHMS_TB_MAPCONEC-NATDC .
ZHMS_VW_MAPCONEC-TYPED =
ZHMS_TB_MAPCONEC-TYPED .
ZHMS_VW_MAPCONEC-LOCTP =
ZHMS_TB_MAPCONEC-LOCTP .
ZHMS_VW_MAPCONEC-MENSG =
ZHMS_TB_MAPCONEC-MENSG .
ZHMS_VW_MAPCONEC-EVENT =
ZHMS_TB_MAPCONEC-EVENT .
ZHMS_VW_MAPCONEC-ETAPA =
ZHMS_TB_MAPCONEC-ETAPA .
ZHMS_VW_MAPCONEC-DENOM =
ZHMS_TB_MAPCONEC-DENOM .
ZHMS_VW_MAPCONEC-CODMP =
ZHMS_TB_MAPCONEC-CODMP .
ZHMS_VW_MAPCONEC-ROTIN =
ZHMS_TB_MAPCONEC-ROTIN .
<VIM_TOTAL_STRUC> = ZHMS_VW_MAPCONEC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MAPCONEC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MAPCONEC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MAPCONEC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPCONEC WHERE
  NATDC = ZHMS_VW_MAPCONEC-NATDC AND
  TYPED = ZHMS_VW_MAPCONEC-TYPED AND
  LOCTP = ZHMS_VW_MAPCONEC-LOCTP AND
  MENSG = ZHMS_VW_MAPCONEC-MENSG AND
  EVENT = ZHMS_VW_MAPCONEC-EVENT AND
  ETAPA = ZHMS_VW_MAPCONEC-ETAPA .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MAPCONEC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPCONEC WHERE
  NATDC = ZHMS_VW_MAPCONEC-NATDC AND
  TYPED = ZHMS_VW_MAPCONEC-TYPED AND
  LOCTP = ZHMS_VW_MAPCONEC-LOCTP AND
  MENSG = ZHMS_VW_MAPCONEC-MENSG AND
  EVENT = ZHMS_VW_MAPCONEC-EVENT AND
  ETAPA = ZHMS_VW_MAPCONEC-ETAPA .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MAPCONEC.
    ENDIF.
ZHMS_TB_MAPCONEC-MANDT =
ZHMS_VW_MAPCONEC-MANDT .
ZHMS_TB_MAPCONEC-NATDC =
ZHMS_VW_MAPCONEC-NATDC .
ZHMS_TB_MAPCONEC-TYPED =
ZHMS_VW_MAPCONEC-TYPED .
ZHMS_TB_MAPCONEC-LOCTP =
ZHMS_VW_MAPCONEC-LOCTP .
ZHMS_TB_MAPCONEC-MENSG =
ZHMS_VW_MAPCONEC-MENSG .
ZHMS_TB_MAPCONEC-EVENT =
ZHMS_VW_MAPCONEC-EVENT .
ZHMS_TB_MAPCONEC-ETAPA =
ZHMS_VW_MAPCONEC-ETAPA .
ZHMS_TB_MAPCONEC-DENOM =
ZHMS_VW_MAPCONEC-DENOM .
ZHMS_TB_MAPCONEC-CODMP =
ZHMS_VW_MAPCONEC-CODMP .
ZHMS_TB_MAPCONEC-ROTIN =
ZHMS_VW_MAPCONEC-ROTIN .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MAPCONEC ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MAPCONEC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MAPCONEC-UPD_FLAG,
STATUS_ZHMS_VW_MAPCONEC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MAPCONEC.
  SELECT SINGLE * FROM ZHMS_TB_MAPCONEC WHERE
NATDC = ZHMS_VW_MAPCONEC-NATDC AND
TYPED = ZHMS_VW_MAPCONEC-TYPED AND
LOCTP = ZHMS_VW_MAPCONEC-LOCTP AND
MENSG = ZHMS_VW_MAPCONEC-MENSG AND
EVENT = ZHMS_VW_MAPCONEC-EVENT AND
ETAPA = ZHMS_VW_MAPCONEC-ETAPA .
ZHMS_VW_MAPCONEC-MANDT =
ZHMS_TB_MAPCONEC-MANDT .
ZHMS_VW_MAPCONEC-NATDC =
ZHMS_TB_MAPCONEC-NATDC .
ZHMS_VW_MAPCONEC-TYPED =
ZHMS_TB_MAPCONEC-TYPED .
ZHMS_VW_MAPCONEC-LOCTP =
ZHMS_TB_MAPCONEC-LOCTP .
ZHMS_VW_MAPCONEC-MENSG =
ZHMS_TB_MAPCONEC-MENSG .
ZHMS_VW_MAPCONEC-EVENT =
ZHMS_TB_MAPCONEC-EVENT .
ZHMS_VW_MAPCONEC-ETAPA =
ZHMS_TB_MAPCONEC-ETAPA .
ZHMS_VW_MAPCONEC-DENOM =
ZHMS_TB_MAPCONEC-DENOM .
ZHMS_VW_MAPCONEC-CODMP =
ZHMS_TB_MAPCONEC-CODMP .
ZHMS_VW_MAPCONEC-ROTIN =
ZHMS_TB_MAPCONEC-ROTIN .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MAPCONEC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MAPCONEC-NATDC TO
ZHMS_TB_MAPCONEC-NATDC .
MOVE ZHMS_VW_MAPCONEC-TYPED TO
ZHMS_TB_MAPCONEC-TYPED .
MOVE ZHMS_VW_MAPCONEC-LOCTP TO
ZHMS_TB_MAPCONEC-LOCTP .
MOVE ZHMS_VW_MAPCONEC-MENSG TO
ZHMS_TB_MAPCONEC-MENSG .
MOVE ZHMS_VW_MAPCONEC-EVENT TO
ZHMS_TB_MAPCONEC-EVENT .
MOVE ZHMS_VW_MAPCONEC-ETAPA TO
ZHMS_TB_MAPCONEC-ETAPA .
MOVE ZHMS_VW_MAPCONEC-MANDT TO
ZHMS_TB_MAPCONEC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MAPCONEC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MAPCONEC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MAPCONEC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MAPDATA.................................*
FORM GET_DATA_ZHMS_VW_MAPDATA.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MAPDATA WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MAPDATA .
ZHMS_VW_MAPDATA-MANDT =
ZHMS_TB_MAPDATA-MANDT .
ZHMS_VW_MAPDATA-CODMP =
ZHMS_TB_MAPDATA-CODMP .
ZHMS_VW_MAPDATA-SEQNR =
ZHMS_TB_MAPDATA-SEQNR .
ZHMS_VW_MAPDATA-MPGRP =
ZHMS_TB_MAPDATA-MPGRP .
ZHMS_VW_MAPDATA-MNEUM =
ZHMS_TB_MAPDATA-MNEUM .
ZHMS_VW_MAPDATA-MNITM =
ZHMS_TB_MAPDATA-MNITM .
ZHMS_VW_MAPDATA-NATFD =
ZHMS_TB_MAPDATA-NATFD .
ZHMS_VW_MAPDATA-TPVAR =
ZHMS_TB_MAPDATA-TPVAR .
ZHMS_VW_MAPDATA-TBNAM =
ZHMS_TB_MAPDATA-TBNAM .
ZHMS_VW_MAPDATA-TBFLD =
ZHMS_TB_MAPDATA-TBFLD .
ZHMS_VW_MAPDATA-VLFIX =
ZHMS_TB_MAPDATA-VLFIX .
ZHMS_VW_MAPDATA-MASK =
ZHMS_TB_MAPDATA-MASK .
ZHMS_VW_MAPDATA-ROTIN =
ZHMS_TB_MAPDATA-ROTIN .
<VIM_TOTAL_STRUC> = ZHMS_VW_MAPDATA.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MAPDATA .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MAPDATA.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MAPDATA-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPDATA WHERE
  CODMP = ZHMS_VW_MAPDATA-CODMP AND
  SEQNR = ZHMS_VW_MAPDATA-SEQNR .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MAPDATA .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPDATA WHERE
  CODMP = ZHMS_VW_MAPDATA-CODMP AND
  SEQNR = ZHMS_VW_MAPDATA-SEQNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MAPDATA.
    ENDIF.
ZHMS_TB_MAPDATA-MANDT =
ZHMS_VW_MAPDATA-MANDT .
ZHMS_TB_MAPDATA-CODMP =
ZHMS_VW_MAPDATA-CODMP .
ZHMS_TB_MAPDATA-SEQNR =
ZHMS_VW_MAPDATA-SEQNR .
ZHMS_TB_MAPDATA-MPGRP =
ZHMS_VW_MAPDATA-MPGRP .
ZHMS_TB_MAPDATA-MNEUM =
ZHMS_VW_MAPDATA-MNEUM .
ZHMS_TB_MAPDATA-MNITM =
ZHMS_VW_MAPDATA-MNITM .
ZHMS_TB_MAPDATA-NATFD =
ZHMS_VW_MAPDATA-NATFD .
ZHMS_TB_MAPDATA-TPVAR =
ZHMS_VW_MAPDATA-TPVAR .
ZHMS_TB_MAPDATA-TBNAM =
ZHMS_VW_MAPDATA-TBNAM .
ZHMS_TB_MAPDATA-TBFLD =
ZHMS_VW_MAPDATA-TBFLD .
ZHMS_TB_MAPDATA-VLFIX =
ZHMS_VW_MAPDATA-VLFIX .
ZHMS_TB_MAPDATA-MASK =
ZHMS_VW_MAPDATA-MASK .
ZHMS_TB_MAPDATA-ROTIN =
ZHMS_VW_MAPDATA-ROTIN .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MAPDATA ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MAPDATA .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MAPDATA-UPD_FLAG,
STATUS_ZHMS_VW_MAPDATA-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MAPDATA.
  SELECT SINGLE * FROM ZHMS_TB_MAPDATA WHERE
CODMP = ZHMS_VW_MAPDATA-CODMP AND
SEQNR = ZHMS_VW_MAPDATA-SEQNR .
ZHMS_VW_MAPDATA-MANDT =
ZHMS_TB_MAPDATA-MANDT .
ZHMS_VW_MAPDATA-CODMP =
ZHMS_TB_MAPDATA-CODMP .
ZHMS_VW_MAPDATA-SEQNR =
ZHMS_TB_MAPDATA-SEQNR .
ZHMS_VW_MAPDATA-MPGRP =
ZHMS_TB_MAPDATA-MPGRP .
ZHMS_VW_MAPDATA-MNEUM =
ZHMS_TB_MAPDATA-MNEUM .
ZHMS_VW_MAPDATA-MNITM =
ZHMS_TB_MAPDATA-MNITM .
ZHMS_VW_MAPDATA-NATFD =
ZHMS_TB_MAPDATA-NATFD .
ZHMS_VW_MAPDATA-TPVAR =
ZHMS_TB_MAPDATA-TPVAR .
ZHMS_VW_MAPDATA-TBNAM =
ZHMS_TB_MAPDATA-TBNAM .
ZHMS_VW_MAPDATA-TBFLD =
ZHMS_TB_MAPDATA-TBFLD .
ZHMS_VW_MAPDATA-VLFIX =
ZHMS_TB_MAPDATA-VLFIX .
ZHMS_VW_MAPDATA-MASK =
ZHMS_TB_MAPDATA-MASK .
ZHMS_VW_MAPDATA-ROTIN =
ZHMS_TB_MAPDATA-ROTIN .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MAPDATA USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MAPDATA-CODMP TO
ZHMS_TB_MAPDATA-CODMP .
MOVE ZHMS_VW_MAPDATA-SEQNR TO
ZHMS_TB_MAPDATA-SEQNR .
MOVE ZHMS_VW_MAPDATA-MANDT TO
ZHMS_TB_MAPDATA-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MAPDATA'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MAPDATA TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MAPDATA'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MAPDATAC................................*
FORM GET_DATA_ZHMS_VW_MAPDATAC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MAPDATAC WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MAPDATAC .
ZHMS_VW_MAPDATAC-MANDT =
ZHMS_TB_MAPDATAC-MANDT .
ZHMS_VW_MAPDATAC-CODMP =
ZHMS_TB_MAPDATAC-CODMP .
ZHMS_VW_MAPDATAC-SEQNR =
ZHMS_TB_MAPDATAC-SEQNR .
ZHMS_VW_MAPDATAC-MNEUM =
ZHMS_TB_MAPDATAC-MNEUM .
ZHMS_VW_MAPDATAC-TIPOI =
ZHMS_TB_MAPDATAC-TIPOI .
ZHMS_VW_MAPDATAC-TBFLD =
ZHMS_TB_MAPDATAC-TBFLD .
ZHMS_VW_MAPDATAC-FIXO =
ZHMS_TB_MAPDATAC-FIXO .
ZHMS_VW_MAPDATAC-ROTIN =
ZHMS_TB_MAPDATAC-ROTIN .
ZHMS_VW_MAPDATAC-OBRIG =
ZHMS_TB_MAPDATAC-OBRIG .
ZHMS_VW_MAPDATAC-RETFO =
ZHMS_TB_MAPDATAC-RETFO .
ZHMS_VW_MAPDATAC-EATRB =
ZHMS_TB_MAPDATAC-EATRB .
<VIM_TOTAL_STRUC> = ZHMS_VW_MAPDATAC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MAPDATAC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MAPDATAC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MAPDATAC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPDATAC WHERE
  CODMP = ZHMS_VW_MAPDATAC-CODMP AND
  SEQNR = ZHMS_VW_MAPDATAC-SEQNR .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MAPDATAC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPDATAC WHERE
  CODMP = ZHMS_VW_MAPDATAC-CODMP AND
  SEQNR = ZHMS_VW_MAPDATAC-SEQNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MAPDATAC.
    ENDIF.
ZHMS_TB_MAPDATAC-MANDT =
ZHMS_VW_MAPDATAC-MANDT .
ZHMS_TB_MAPDATAC-CODMP =
ZHMS_VW_MAPDATAC-CODMP .
ZHMS_TB_MAPDATAC-SEQNR =
ZHMS_VW_MAPDATAC-SEQNR .
ZHMS_TB_MAPDATAC-MNEUM =
ZHMS_VW_MAPDATAC-MNEUM .
ZHMS_TB_MAPDATAC-TIPOI =
ZHMS_VW_MAPDATAC-TIPOI .
ZHMS_TB_MAPDATAC-TBFLD =
ZHMS_VW_MAPDATAC-TBFLD .
ZHMS_TB_MAPDATAC-FIXO =
ZHMS_VW_MAPDATAC-FIXO .
ZHMS_TB_MAPDATAC-ROTIN =
ZHMS_VW_MAPDATAC-ROTIN .
ZHMS_TB_MAPDATAC-OBRIG =
ZHMS_VW_MAPDATAC-OBRIG .
ZHMS_TB_MAPDATAC-RETFO =
ZHMS_VW_MAPDATAC-RETFO .
ZHMS_TB_MAPDATAC-EATRB =
ZHMS_VW_MAPDATAC-EATRB .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MAPDATAC ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MAPDATAC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MAPDATAC-UPD_FLAG,
STATUS_ZHMS_VW_MAPDATAC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MAPDATAC.
  SELECT SINGLE * FROM ZHMS_TB_MAPDATAC WHERE
CODMP = ZHMS_VW_MAPDATAC-CODMP AND
SEQNR = ZHMS_VW_MAPDATAC-SEQNR .
ZHMS_VW_MAPDATAC-MANDT =
ZHMS_TB_MAPDATAC-MANDT .
ZHMS_VW_MAPDATAC-CODMP =
ZHMS_TB_MAPDATAC-CODMP .
ZHMS_VW_MAPDATAC-SEQNR =
ZHMS_TB_MAPDATAC-SEQNR .
ZHMS_VW_MAPDATAC-MNEUM =
ZHMS_TB_MAPDATAC-MNEUM .
ZHMS_VW_MAPDATAC-TIPOI =
ZHMS_TB_MAPDATAC-TIPOI .
ZHMS_VW_MAPDATAC-TBFLD =
ZHMS_TB_MAPDATAC-TBFLD .
ZHMS_VW_MAPDATAC-FIXO =
ZHMS_TB_MAPDATAC-FIXO .
ZHMS_VW_MAPDATAC-ROTIN =
ZHMS_TB_MAPDATAC-ROTIN .
ZHMS_VW_MAPDATAC-OBRIG =
ZHMS_TB_MAPDATAC-OBRIG .
ZHMS_VW_MAPDATAC-RETFO =
ZHMS_TB_MAPDATAC-RETFO .
ZHMS_VW_MAPDATAC-EATRB =
ZHMS_TB_MAPDATAC-EATRB .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MAPDATAC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MAPDATAC-CODMP TO
ZHMS_TB_MAPDATAC-CODMP .
MOVE ZHMS_VW_MAPDATAC-SEQNR TO
ZHMS_TB_MAPDATAC-SEQNR .
MOVE ZHMS_VW_MAPDATAC-MANDT TO
ZHMS_TB_MAPDATAC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MAPDATAC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MAPDATAC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MAPDATAC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MAPPCONE................................*
FORM GET_DATA_ZHMS_VW_MAPPCONE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MAPPCONE WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MAPPCONE .
ZHMS_VW_MAPPCONE-MANDT =
ZHMS_TB_MAPPCONE-MANDT .
ZHMS_VW_MAPPCONE-CODMP =
ZHMS_TB_MAPPCONE-CODMP .
ZHMS_VW_MAPPCONE-DENOM =
ZHMS_TB_MAPPCONE-DENOM .
<VIM_TOTAL_STRUC> = ZHMS_VW_MAPPCONE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MAPPCONE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MAPPCONE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MAPPCONE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPPCONE WHERE
  CODMP = ZHMS_VW_MAPPCONE-CODMP .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MAPPCONE .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPPCONE WHERE
  CODMP = ZHMS_VW_MAPPCONE-CODMP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MAPPCONE.
    ENDIF.
ZHMS_TB_MAPPCONE-MANDT =
ZHMS_VW_MAPPCONE-MANDT .
ZHMS_TB_MAPPCONE-CODMP =
ZHMS_VW_MAPPCONE-CODMP .
ZHMS_TB_MAPPCONE-DENOM =
ZHMS_VW_MAPPCONE-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MAPPCONE ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MAPPCONE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MAPPCONE-UPD_FLAG,
STATUS_ZHMS_VW_MAPPCONE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MAPPCONE.
  SELECT SINGLE * FROM ZHMS_TB_MAPPCONE WHERE
CODMP = ZHMS_VW_MAPPCONE-CODMP .
ZHMS_VW_MAPPCONE-MANDT =
ZHMS_TB_MAPPCONE-MANDT .
ZHMS_VW_MAPPCONE-CODMP =
ZHMS_TB_MAPPCONE-CODMP .
ZHMS_VW_MAPPCONE-DENOM =
ZHMS_TB_MAPPCONE-DENOM .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MAPPCONE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MAPPCONE-CODMP TO
ZHMS_TB_MAPPCONE-CODMP .
MOVE ZHMS_VW_MAPPCONE-MANDT TO
ZHMS_TB_MAPPCONE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MAPPCONE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MAPPCONE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MAPPCONE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MAPPING.................................*
FORM GET_DATA_ZHMS_VW_MAPPING.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MAPPING WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MAPPING .
ZHMS_VW_MAPPING-MANDT =
ZHMS_TB_MAPPING-MANDT .
ZHMS_VW_MAPPING-CODMP =
ZHMS_TB_MAPPING-CODMP .
ZHMS_VW_MAPPING-DEROT =
ZHMS_TB_MAPPING-DEROT .
    SELECT SINGLE * FROM ZHMS_TX_MAPPING WHERE
CODMP = ZHMS_TB_MAPPING-CODMP AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_MAPPING-DENOM =
ZHMS_TX_MAPPING-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_MAPPING.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MAPPING .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MAPPING.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MAPPING-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPPING WHERE
  CODMP = ZHMS_VW_MAPPING-CODMP .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MAPPING .
    ENDIF.
    DELETE FROM ZHMS_TX_MAPPING WHERE
    CODMP = ZHMS_TB_MAPPING-CODMP .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAPPING WHERE
  CODMP = ZHMS_VW_MAPPING-CODMP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MAPPING.
    ENDIF.
ZHMS_TB_MAPPING-MANDT =
ZHMS_VW_MAPPING-MANDT .
ZHMS_TB_MAPPING-CODMP =
ZHMS_VW_MAPPING-CODMP .
ZHMS_TB_MAPPING-DEROT =
ZHMS_VW_MAPPING-DEROT .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MAPPING ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MAPPING .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_MAPPING WHERE
    CODMP = ZHMS_TB_MAPPING-CODMP AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_MAPPING.
ZHMS_TX_MAPPING-CODMP =
ZHMS_TB_MAPPING-CODMP .
ZHMS_TX_MAPPING-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_MAPPING-DENOM =
ZHMS_VW_MAPPING-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_MAPPING ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_MAPPING .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MAPPING-UPD_FLAG,
STATUS_ZHMS_VW_MAPPING-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MAPPING.
  SELECT SINGLE * FROM ZHMS_TB_MAPPING WHERE
CODMP = ZHMS_VW_MAPPING-CODMP .
ZHMS_VW_MAPPING-MANDT =
ZHMS_TB_MAPPING-MANDT .
ZHMS_VW_MAPPING-CODMP =
ZHMS_TB_MAPPING-CODMP .
ZHMS_VW_MAPPING-DEROT =
ZHMS_TB_MAPPING-DEROT .
    SELECT SINGLE * FROM ZHMS_TX_MAPPING WHERE
CODMP = ZHMS_TB_MAPPING-CODMP AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_MAPPING-DENOM =
ZHMS_TX_MAPPING-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_MAPPING-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MAPPING USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MAPPING-CODMP TO
ZHMS_TB_MAPPING-CODMP .
MOVE ZHMS_VW_MAPPING-MANDT TO
ZHMS_TB_MAPPING-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MAPPING'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MAPPING TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MAPPING'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_MAPPING-CODMP TO
ZHMS_TX_MAPPING-CODMP .
MOVE SY-LANGU TO
ZHMS_TX_MAPPING-SPRAS .
MOVE ZHMS_VW_MAPPING-MANDT TO
ZHMS_TX_MAPPING-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_MAPPING'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_MAPPING TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_MAPPING'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MESSAGIN................................*
FORM GET_DATA_ZHMS_VW_MESSAGIN.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MESSAGIN WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MESSAGIN .
ZHMS_VW_MESSAGIN-MANDT =
ZHMS_TB_MESSAGIN-MANDT .
ZHMS_VW_MESSAGIN-NATDC =
ZHMS_TB_MESSAGIN-NATDC .
ZHMS_VW_MESSAGIN-TYPED =
ZHMS_TB_MESSAGIN-TYPED .
ZHMS_VW_MESSAGIN-LOCTP =
ZHMS_TB_MESSAGIN-LOCTP .
ZHMS_VW_MESSAGIN-MENSG =
ZHMS_TB_MESSAGIN-MENSG .
ZHMS_VW_MESSAGIN-SERVM =
ZHMS_TB_MESSAGIN-SERVM .
ZHMS_VW_MESSAGIN-EXNAT =
ZHMS_TB_MESSAGIN-EXNAT .
ZHMS_VW_MESSAGIN-EXTPD =
ZHMS_TB_MESSAGIN-EXTPD .
    SELECT SINGLE * FROM ZHMS_TX_MESSAGIN WHERE
NATDC = ZHMS_TB_MESSAGIN-NATDC AND
TYPED = ZHMS_TB_MESSAGIN-TYPED AND
LOCTP = ZHMS_TB_MESSAGIN-LOCTP AND
MENSG = ZHMS_TB_MESSAGIN-MENSG AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_MESSAGIN-DENOM =
ZHMS_TX_MESSAGIN-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_MESSAGIN.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MESSAGIN .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MESSAGIN.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MESSAGIN-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MESSAGIN WHERE
  NATDC = ZHMS_VW_MESSAGIN-NATDC AND
  TYPED = ZHMS_VW_MESSAGIN-TYPED AND
  LOCTP = ZHMS_VW_MESSAGIN-LOCTP AND
  MENSG = ZHMS_VW_MESSAGIN-MENSG .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MESSAGIN .
    ENDIF.
    DELETE FROM ZHMS_TX_MESSAGIN WHERE
    NATDC = ZHMS_TB_MESSAGIN-NATDC AND
    TYPED = ZHMS_TB_MESSAGIN-TYPED AND
    LOCTP = ZHMS_TB_MESSAGIN-LOCTP AND
    MENSG = ZHMS_TB_MESSAGIN-MENSG .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MESSAGIN WHERE
  NATDC = ZHMS_VW_MESSAGIN-NATDC AND
  TYPED = ZHMS_VW_MESSAGIN-TYPED AND
  LOCTP = ZHMS_VW_MESSAGIN-LOCTP AND
  MENSG = ZHMS_VW_MESSAGIN-MENSG .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MESSAGIN.
    ENDIF.
ZHMS_TB_MESSAGIN-MANDT =
ZHMS_VW_MESSAGIN-MANDT .
ZHMS_TB_MESSAGIN-NATDC =
ZHMS_VW_MESSAGIN-NATDC .
ZHMS_TB_MESSAGIN-TYPED =
ZHMS_VW_MESSAGIN-TYPED .
ZHMS_TB_MESSAGIN-LOCTP =
ZHMS_VW_MESSAGIN-LOCTP .
ZHMS_TB_MESSAGIN-MENSG =
ZHMS_VW_MESSAGIN-MENSG .
ZHMS_TB_MESSAGIN-SERVM =
ZHMS_VW_MESSAGIN-SERVM .
ZHMS_TB_MESSAGIN-EXNAT =
ZHMS_VW_MESSAGIN-EXNAT .
ZHMS_TB_MESSAGIN-EXTPD =
ZHMS_VW_MESSAGIN-EXTPD .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MESSAGIN ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MESSAGIN .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_MESSAGIN WHERE
    NATDC = ZHMS_TB_MESSAGIN-NATDC AND
    TYPED = ZHMS_TB_MESSAGIN-TYPED AND
    LOCTP = ZHMS_TB_MESSAGIN-LOCTP AND
    MENSG = ZHMS_TB_MESSAGIN-MENSG AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_MESSAGIN.
ZHMS_TX_MESSAGIN-NATDC =
ZHMS_TB_MESSAGIN-NATDC .
ZHMS_TX_MESSAGIN-TYPED =
ZHMS_TB_MESSAGIN-TYPED .
ZHMS_TX_MESSAGIN-LOCTP =
ZHMS_TB_MESSAGIN-LOCTP .
ZHMS_TX_MESSAGIN-MENSG =
ZHMS_TB_MESSAGIN-MENSG .
ZHMS_TX_MESSAGIN-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_MESSAGIN-DENOM =
ZHMS_VW_MESSAGIN-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_MESSAGIN ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_MESSAGIN .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MESSAGIN-UPD_FLAG,
STATUS_ZHMS_VW_MESSAGIN-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MESSAGIN.
  SELECT SINGLE * FROM ZHMS_TB_MESSAGIN WHERE
NATDC = ZHMS_VW_MESSAGIN-NATDC AND
TYPED = ZHMS_VW_MESSAGIN-TYPED AND
LOCTP = ZHMS_VW_MESSAGIN-LOCTP AND
MENSG = ZHMS_VW_MESSAGIN-MENSG .
ZHMS_VW_MESSAGIN-MANDT =
ZHMS_TB_MESSAGIN-MANDT .
ZHMS_VW_MESSAGIN-NATDC =
ZHMS_TB_MESSAGIN-NATDC .
ZHMS_VW_MESSAGIN-TYPED =
ZHMS_TB_MESSAGIN-TYPED .
ZHMS_VW_MESSAGIN-LOCTP =
ZHMS_TB_MESSAGIN-LOCTP .
ZHMS_VW_MESSAGIN-MENSG =
ZHMS_TB_MESSAGIN-MENSG .
ZHMS_VW_MESSAGIN-SERVM =
ZHMS_TB_MESSAGIN-SERVM .
ZHMS_VW_MESSAGIN-EXNAT =
ZHMS_TB_MESSAGIN-EXNAT .
ZHMS_VW_MESSAGIN-EXTPD =
ZHMS_TB_MESSAGIN-EXTPD .
    SELECT SINGLE * FROM ZHMS_TX_MESSAGIN WHERE
NATDC = ZHMS_TB_MESSAGIN-NATDC AND
TYPED = ZHMS_TB_MESSAGIN-TYPED AND
LOCTP = ZHMS_TB_MESSAGIN-LOCTP AND
MENSG = ZHMS_TB_MESSAGIN-MENSG AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_MESSAGIN-DENOM =
ZHMS_TX_MESSAGIN-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_MESSAGIN-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MESSAGIN USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MESSAGIN-NATDC TO
ZHMS_TB_MESSAGIN-NATDC .
MOVE ZHMS_VW_MESSAGIN-TYPED TO
ZHMS_TB_MESSAGIN-TYPED .
MOVE ZHMS_VW_MESSAGIN-LOCTP TO
ZHMS_TB_MESSAGIN-LOCTP .
MOVE ZHMS_VW_MESSAGIN-MENSG TO
ZHMS_TB_MESSAGIN-MENSG .
MOVE ZHMS_VW_MESSAGIN-MANDT TO
ZHMS_TB_MESSAGIN-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MESSAGIN'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MESSAGIN TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MESSAGIN'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_MESSAGIN-NATDC TO
ZHMS_TX_MESSAGIN-NATDC .
MOVE ZHMS_TB_MESSAGIN-TYPED TO
ZHMS_TX_MESSAGIN-TYPED .
MOVE ZHMS_TB_MESSAGIN-LOCTP TO
ZHMS_TX_MESSAGIN-LOCTP .
MOVE ZHMS_TB_MESSAGIN-MENSG TO
ZHMS_TX_MESSAGIN-MENSG .
MOVE SY-LANGU TO
ZHMS_TX_MESSAGIN-SPRAS .
MOVE ZHMS_VW_MESSAGIN-MANDT TO
ZHMS_TX_MESSAGIN-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_MESSAGIN'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_MESSAGIN TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_MESSAGIN'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MSGEVL_A................................*
FORM GET_DATA_ZHMS_VW_MSGEVL_A.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MSGEVL_A WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MSGEVL_A .
ZHMS_VW_MSGEVL_A-MANDT =
ZHMS_TB_MSGEVL_A-MANDT .
ZHMS_VW_MSGEVL_A-NATDC =
ZHMS_TB_MSGEVL_A-NATDC .
ZHMS_VW_MSGEVL_A-TYPED =
ZHMS_TB_MSGEVL_A-TYPED .
ZHMS_VW_MSGEVL_A-LOCTP =
ZHMS_TB_MSGEVL_A-LOCTP .
ZHMS_VW_MSGEVL_A-MENSG =
ZHMS_TB_MSGEVL_A-MENSG .
ZHMS_VW_MSGEVL_A-EVENT =
ZHMS_TB_MSGEVL_A-EVENT .
ZHMS_VW_MSGEVL_A-VERSN =
ZHMS_TB_MSGEVL_A-VERSN .
ZHMS_VW_MSGEVL_A-CODLY =
ZHMS_TB_MSGEVL_A-CODLY .
ZHMS_VW_MSGEVL_A-CODAT =
ZHMS_TB_MSGEVL_A-CODAT .
ZHMS_VW_MSGEVL_A-FIELD =
ZHMS_TB_MSGEVL_A-FIELD .
ZHMS_VW_MSGEVL_A-VALUE =
ZHMS_TB_MSGEVL_A-VALUE .
<VIM_TOTAL_STRUC> = ZHMS_VW_MSGEVL_A.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MSGEVL_A .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MSGEVL_A.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MSGEVL_A-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGEVL_A WHERE
  NATDC = ZHMS_VW_MSGEVL_A-NATDC AND
  TYPED = ZHMS_VW_MSGEVL_A-TYPED AND
  LOCTP = ZHMS_VW_MSGEVL_A-LOCTP AND
  MENSG = ZHMS_VW_MSGEVL_A-MENSG AND
  EVENT = ZHMS_VW_MSGEVL_A-EVENT AND
  VERSN = ZHMS_VW_MSGEVL_A-VERSN AND
  CODLY = ZHMS_VW_MSGEVL_A-CODLY AND
  CODAT = ZHMS_VW_MSGEVL_A-CODAT .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MSGEVL_A .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGEVL_A WHERE
  NATDC = ZHMS_VW_MSGEVL_A-NATDC AND
  TYPED = ZHMS_VW_MSGEVL_A-TYPED AND
  LOCTP = ZHMS_VW_MSGEVL_A-LOCTP AND
  MENSG = ZHMS_VW_MSGEVL_A-MENSG AND
  EVENT = ZHMS_VW_MSGEVL_A-EVENT AND
  VERSN = ZHMS_VW_MSGEVL_A-VERSN AND
  CODLY = ZHMS_VW_MSGEVL_A-CODLY AND
  CODAT = ZHMS_VW_MSGEVL_A-CODAT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MSGEVL_A.
    ENDIF.
ZHMS_TB_MSGEVL_A-MANDT =
ZHMS_VW_MSGEVL_A-MANDT .
ZHMS_TB_MSGEVL_A-NATDC =
ZHMS_VW_MSGEVL_A-NATDC .
ZHMS_TB_MSGEVL_A-TYPED =
ZHMS_VW_MSGEVL_A-TYPED .
ZHMS_TB_MSGEVL_A-LOCTP =
ZHMS_VW_MSGEVL_A-LOCTP .
ZHMS_TB_MSGEVL_A-MENSG =
ZHMS_VW_MSGEVL_A-MENSG .
ZHMS_TB_MSGEVL_A-EVENT =
ZHMS_VW_MSGEVL_A-EVENT .
ZHMS_TB_MSGEVL_A-VERSN =
ZHMS_VW_MSGEVL_A-VERSN .
ZHMS_TB_MSGEVL_A-CODLY =
ZHMS_VW_MSGEVL_A-CODLY .
ZHMS_TB_MSGEVL_A-CODAT =
ZHMS_VW_MSGEVL_A-CODAT .
ZHMS_TB_MSGEVL_A-FIELD =
ZHMS_VW_MSGEVL_A-FIELD .
ZHMS_TB_MSGEVL_A-VALUE =
ZHMS_VW_MSGEVL_A-VALUE .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MSGEVL_A ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MSGEVL_A .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MSGEVL_A-UPD_FLAG,
STATUS_ZHMS_VW_MSGEVL_A-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MSGEVL_A.
  SELECT SINGLE * FROM ZHMS_TB_MSGEVL_A WHERE
NATDC = ZHMS_VW_MSGEVL_A-NATDC AND
TYPED = ZHMS_VW_MSGEVL_A-TYPED AND
LOCTP = ZHMS_VW_MSGEVL_A-LOCTP AND
MENSG = ZHMS_VW_MSGEVL_A-MENSG AND
EVENT = ZHMS_VW_MSGEVL_A-EVENT AND
VERSN = ZHMS_VW_MSGEVL_A-VERSN AND
CODLY = ZHMS_VW_MSGEVL_A-CODLY AND
CODAT = ZHMS_VW_MSGEVL_A-CODAT .
ZHMS_VW_MSGEVL_A-MANDT =
ZHMS_TB_MSGEVL_A-MANDT .
ZHMS_VW_MSGEVL_A-NATDC =
ZHMS_TB_MSGEVL_A-NATDC .
ZHMS_VW_MSGEVL_A-TYPED =
ZHMS_TB_MSGEVL_A-TYPED .
ZHMS_VW_MSGEVL_A-LOCTP =
ZHMS_TB_MSGEVL_A-LOCTP .
ZHMS_VW_MSGEVL_A-MENSG =
ZHMS_TB_MSGEVL_A-MENSG .
ZHMS_VW_MSGEVL_A-EVENT =
ZHMS_TB_MSGEVL_A-EVENT .
ZHMS_VW_MSGEVL_A-VERSN =
ZHMS_TB_MSGEVL_A-VERSN .
ZHMS_VW_MSGEVL_A-CODLY =
ZHMS_TB_MSGEVL_A-CODLY .
ZHMS_VW_MSGEVL_A-CODAT =
ZHMS_TB_MSGEVL_A-CODAT .
ZHMS_VW_MSGEVL_A-FIELD =
ZHMS_TB_MSGEVL_A-FIELD .
ZHMS_VW_MSGEVL_A-VALUE =
ZHMS_TB_MSGEVL_A-VALUE .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MSGEVL_A USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MSGEVL_A-NATDC TO
ZHMS_TB_MSGEVL_A-NATDC .
MOVE ZHMS_VW_MSGEVL_A-TYPED TO
ZHMS_TB_MSGEVL_A-TYPED .
MOVE ZHMS_VW_MSGEVL_A-LOCTP TO
ZHMS_TB_MSGEVL_A-LOCTP .
MOVE ZHMS_VW_MSGEVL_A-MENSG TO
ZHMS_TB_MSGEVL_A-MENSG .
MOVE ZHMS_VW_MSGEVL_A-EVENT TO
ZHMS_TB_MSGEVL_A-EVENT .
MOVE ZHMS_VW_MSGEVL_A-VERSN TO
ZHMS_TB_MSGEVL_A-VERSN .
MOVE ZHMS_VW_MSGEVL_A-CODLY TO
ZHMS_TB_MSGEVL_A-CODLY .
MOVE ZHMS_VW_MSGEVL_A-CODAT TO
ZHMS_TB_MSGEVL_A-CODAT .
MOVE ZHMS_VW_MSGEVL_A-MANDT TO
ZHMS_TB_MSGEVL_A-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MSGEVL_A'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MSGEVL_A TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MSGEVL_A'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MSGEVM_A................................*
FORM GET_DATA_ZHMS_VW_MSGEVM_A.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MSGEVM_A WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MSGEVM_A .
ZHMS_VW_MSGEVM_A-MANDT =
ZHMS_TB_MSGEVM_A-MANDT .
ZHMS_VW_MSGEVM_A-NATDC =
ZHMS_TB_MSGEVM_A-NATDC .
ZHMS_VW_MSGEVM_A-TYPED =
ZHMS_TB_MSGEVM_A-TYPED .
ZHMS_VW_MSGEVM_A-LOCTP =
ZHMS_TB_MSGEVM_A-LOCTP .
ZHMS_VW_MSGEVM_A-MENSG =
ZHMS_TB_MSGEVM_A-MENSG .
ZHMS_VW_MSGEVM_A-EVENT =
ZHMS_TB_MSGEVM_A-EVENT .
ZHMS_VW_MSGEVM_A-VERSN =
ZHMS_TB_MSGEVM_A-VERSN .
ZHMS_VW_MSGEVM_A-CODMT =
ZHMS_TB_MSGEVM_A-CODMT .
ZHMS_VW_MSGEVM_A-CODAT =
ZHMS_TB_MSGEVM_A-CODAT .
ZHMS_VW_MSGEVM_A-FIELD =
ZHMS_TB_MSGEVM_A-FIELD .
ZHMS_VW_MSGEVM_A-VALUE =
ZHMS_TB_MSGEVM_A-VALUE .
<VIM_TOTAL_STRUC> = ZHMS_VW_MSGEVM_A.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MSGEVM_A .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MSGEVM_A.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MSGEVM_A-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGEVM_A WHERE
  NATDC = ZHMS_VW_MSGEVM_A-NATDC AND
  TYPED = ZHMS_VW_MSGEVM_A-TYPED AND
  LOCTP = ZHMS_VW_MSGEVM_A-LOCTP AND
  MENSG = ZHMS_VW_MSGEVM_A-MENSG AND
  EVENT = ZHMS_VW_MSGEVM_A-EVENT AND
  VERSN = ZHMS_VW_MSGEVM_A-VERSN AND
  CODMT = ZHMS_VW_MSGEVM_A-CODMT AND
  CODAT = ZHMS_VW_MSGEVM_A-CODAT .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MSGEVM_A .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGEVM_A WHERE
  NATDC = ZHMS_VW_MSGEVM_A-NATDC AND
  TYPED = ZHMS_VW_MSGEVM_A-TYPED AND
  LOCTP = ZHMS_VW_MSGEVM_A-LOCTP AND
  MENSG = ZHMS_VW_MSGEVM_A-MENSG AND
  EVENT = ZHMS_VW_MSGEVM_A-EVENT AND
  VERSN = ZHMS_VW_MSGEVM_A-VERSN AND
  CODMT = ZHMS_VW_MSGEVM_A-CODMT AND
  CODAT = ZHMS_VW_MSGEVM_A-CODAT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MSGEVM_A.
    ENDIF.
ZHMS_TB_MSGEVM_A-MANDT =
ZHMS_VW_MSGEVM_A-MANDT .
ZHMS_TB_MSGEVM_A-NATDC =
ZHMS_VW_MSGEVM_A-NATDC .
ZHMS_TB_MSGEVM_A-TYPED =
ZHMS_VW_MSGEVM_A-TYPED .
ZHMS_TB_MSGEVM_A-LOCTP =
ZHMS_VW_MSGEVM_A-LOCTP .
ZHMS_TB_MSGEVM_A-MENSG =
ZHMS_VW_MSGEVM_A-MENSG .
ZHMS_TB_MSGEVM_A-EVENT =
ZHMS_VW_MSGEVM_A-EVENT .
ZHMS_TB_MSGEVM_A-VERSN =
ZHMS_VW_MSGEVM_A-VERSN .
ZHMS_TB_MSGEVM_A-CODMT =
ZHMS_VW_MSGEVM_A-CODMT .
ZHMS_TB_MSGEVM_A-CODAT =
ZHMS_VW_MSGEVM_A-CODAT .
ZHMS_TB_MSGEVM_A-FIELD =
ZHMS_VW_MSGEVM_A-FIELD .
ZHMS_TB_MSGEVM_A-VALUE =
ZHMS_VW_MSGEVM_A-VALUE .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MSGEVM_A ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MSGEVM_A .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MSGEVM_A-UPD_FLAG,
STATUS_ZHMS_VW_MSGEVM_A-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MSGEVM_A.
  SELECT SINGLE * FROM ZHMS_TB_MSGEVM_A WHERE
NATDC = ZHMS_VW_MSGEVM_A-NATDC AND
TYPED = ZHMS_VW_MSGEVM_A-TYPED AND
LOCTP = ZHMS_VW_MSGEVM_A-LOCTP AND
MENSG = ZHMS_VW_MSGEVM_A-MENSG AND
EVENT = ZHMS_VW_MSGEVM_A-EVENT AND
VERSN = ZHMS_VW_MSGEVM_A-VERSN AND
CODMT = ZHMS_VW_MSGEVM_A-CODMT AND
CODAT = ZHMS_VW_MSGEVM_A-CODAT .
ZHMS_VW_MSGEVM_A-MANDT =
ZHMS_TB_MSGEVM_A-MANDT .
ZHMS_VW_MSGEVM_A-NATDC =
ZHMS_TB_MSGEVM_A-NATDC .
ZHMS_VW_MSGEVM_A-TYPED =
ZHMS_TB_MSGEVM_A-TYPED .
ZHMS_VW_MSGEVM_A-LOCTP =
ZHMS_TB_MSGEVM_A-LOCTP .
ZHMS_VW_MSGEVM_A-MENSG =
ZHMS_TB_MSGEVM_A-MENSG .
ZHMS_VW_MSGEVM_A-EVENT =
ZHMS_TB_MSGEVM_A-EVENT .
ZHMS_VW_MSGEVM_A-VERSN =
ZHMS_TB_MSGEVM_A-VERSN .
ZHMS_VW_MSGEVM_A-CODMT =
ZHMS_TB_MSGEVM_A-CODMT .
ZHMS_VW_MSGEVM_A-CODAT =
ZHMS_TB_MSGEVM_A-CODAT .
ZHMS_VW_MSGEVM_A-FIELD =
ZHMS_TB_MSGEVM_A-FIELD .
ZHMS_VW_MSGEVM_A-VALUE =
ZHMS_TB_MSGEVM_A-VALUE .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MSGEVM_A USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MSGEVM_A-NATDC TO
ZHMS_TB_MSGEVM_A-NATDC .
MOVE ZHMS_VW_MSGEVM_A-TYPED TO
ZHMS_TB_MSGEVM_A-TYPED .
MOVE ZHMS_VW_MSGEVM_A-LOCTP TO
ZHMS_TB_MSGEVM_A-LOCTP .
MOVE ZHMS_VW_MSGEVM_A-MENSG TO
ZHMS_TB_MSGEVM_A-MENSG .
MOVE ZHMS_VW_MSGEVM_A-EVENT TO
ZHMS_TB_MSGEVM_A-EVENT .
MOVE ZHMS_VW_MSGEVM_A-VERSN TO
ZHMS_TB_MSGEVM_A-VERSN .
MOVE ZHMS_VW_MSGEVM_A-CODMT TO
ZHMS_TB_MSGEVM_A-CODMT .
MOVE ZHMS_VW_MSGEVM_A-CODAT TO
ZHMS_TB_MSGEVM_A-CODAT .
MOVE ZHMS_VW_MSGEVM_A-MANDT TO
ZHMS_TB_MSGEVM_A-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MSGEVM_A'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MSGEVM_A TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MSGEVM_A'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MSGEV_LT................................*
FORM GET_DATA_ZHMS_VW_MSGEV_LT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MSGEV_LT WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MSGEV_LT .
ZHMS_VW_MSGEV_LT-MANDT =
ZHMS_TB_MSGEV_LT-MANDT .
ZHMS_VW_MSGEV_LT-NATDC =
ZHMS_TB_MSGEV_LT-NATDC .
ZHMS_VW_MSGEV_LT-TYPED =
ZHMS_TB_MSGEV_LT-TYPED .
ZHMS_VW_MSGEV_LT-LOCTP =
ZHMS_TB_MSGEV_LT-LOCTP .
ZHMS_VW_MSGEV_LT-MENSG =
ZHMS_TB_MSGEV_LT-MENSG .
ZHMS_VW_MSGEV_LT-EVENT =
ZHMS_TB_MSGEV_LT-EVENT .
ZHMS_VW_MSGEV_LT-VERSN =
ZHMS_TB_MSGEV_LT-VERSN .
ZHMS_VW_MSGEV_LT-CODLY =
ZHMS_TB_MSGEV_LT-CODLY .
ZHMS_VW_MSGEV_LT-FIELD =
ZHMS_TB_MSGEV_LT-FIELD .
<VIM_TOTAL_STRUC> = ZHMS_VW_MSGEV_LT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MSGEV_LT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MSGEV_LT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MSGEV_LT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGEV_LT WHERE
  NATDC = ZHMS_VW_MSGEV_LT-NATDC AND
  TYPED = ZHMS_VW_MSGEV_LT-TYPED AND
  LOCTP = ZHMS_VW_MSGEV_LT-LOCTP AND
  MENSG = ZHMS_VW_MSGEV_LT-MENSG AND
  EVENT = ZHMS_VW_MSGEV_LT-EVENT AND
  VERSN = ZHMS_VW_MSGEV_LT-VERSN AND
  CODLY = ZHMS_VW_MSGEV_LT-CODLY .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MSGEV_LT .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGEV_LT WHERE
  NATDC = ZHMS_VW_MSGEV_LT-NATDC AND
  TYPED = ZHMS_VW_MSGEV_LT-TYPED AND
  LOCTP = ZHMS_VW_MSGEV_LT-LOCTP AND
  MENSG = ZHMS_VW_MSGEV_LT-MENSG AND
  EVENT = ZHMS_VW_MSGEV_LT-EVENT AND
  VERSN = ZHMS_VW_MSGEV_LT-VERSN AND
  CODLY = ZHMS_VW_MSGEV_LT-CODLY .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MSGEV_LT.
    ENDIF.
ZHMS_TB_MSGEV_LT-MANDT =
ZHMS_VW_MSGEV_LT-MANDT .
ZHMS_TB_MSGEV_LT-NATDC =
ZHMS_VW_MSGEV_LT-NATDC .
ZHMS_TB_MSGEV_LT-TYPED =
ZHMS_VW_MSGEV_LT-TYPED .
ZHMS_TB_MSGEV_LT-LOCTP =
ZHMS_VW_MSGEV_LT-LOCTP .
ZHMS_TB_MSGEV_LT-MENSG =
ZHMS_VW_MSGEV_LT-MENSG .
ZHMS_TB_MSGEV_LT-EVENT =
ZHMS_VW_MSGEV_LT-EVENT .
ZHMS_TB_MSGEV_LT-VERSN =
ZHMS_VW_MSGEV_LT-VERSN .
ZHMS_TB_MSGEV_LT-CODLY =
ZHMS_VW_MSGEV_LT-CODLY .
ZHMS_TB_MSGEV_LT-FIELD =
ZHMS_VW_MSGEV_LT-FIELD .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MSGEV_LT ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MSGEV_LT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MSGEV_LT-UPD_FLAG,
STATUS_ZHMS_VW_MSGEV_LT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MSGEV_LT.
  SELECT SINGLE * FROM ZHMS_TB_MSGEV_LT WHERE
NATDC = ZHMS_VW_MSGEV_LT-NATDC AND
TYPED = ZHMS_VW_MSGEV_LT-TYPED AND
LOCTP = ZHMS_VW_MSGEV_LT-LOCTP AND
MENSG = ZHMS_VW_MSGEV_LT-MENSG AND
EVENT = ZHMS_VW_MSGEV_LT-EVENT AND
VERSN = ZHMS_VW_MSGEV_LT-VERSN AND
CODLY = ZHMS_VW_MSGEV_LT-CODLY .
ZHMS_VW_MSGEV_LT-MANDT =
ZHMS_TB_MSGEV_LT-MANDT .
ZHMS_VW_MSGEV_LT-NATDC =
ZHMS_TB_MSGEV_LT-NATDC .
ZHMS_VW_MSGEV_LT-TYPED =
ZHMS_TB_MSGEV_LT-TYPED .
ZHMS_VW_MSGEV_LT-LOCTP =
ZHMS_TB_MSGEV_LT-LOCTP .
ZHMS_VW_MSGEV_LT-MENSG =
ZHMS_TB_MSGEV_LT-MENSG .
ZHMS_VW_MSGEV_LT-EVENT =
ZHMS_TB_MSGEV_LT-EVENT .
ZHMS_VW_MSGEV_LT-VERSN =
ZHMS_TB_MSGEV_LT-VERSN .
ZHMS_VW_MSGEV_LT-CODLY =
ZHMS_TB_MSGEV_LT-CODLY .
ZHMS_VW_MSGEV_LT-FIELD =
ZHMS_TB_MSGEV_LT-FIELD .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MSGEV_LT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MSGEV_LT-NATDC TO
ZHMS_TB_MSGEV_LT-NATDC .
MOVE ZHMS_VW_MSGEV_LT-TYPED TO
ZHMS_TB_MSGEV_LT-TYPED .
MOVE ZHMS_VW_MSGEV_LT-LOCTP TO
ZHMS_TB_MSGEV_LT-LOCTP .
MOVE ZHMS_VW_MSGEV_LT-MENSG TO
ZHMS_TB_MSGEV_LT-MENSG .
MOVE ZHMS_VW_MSGEV_LT-EVENT TO
ZHMS_TB_MSGEV_LT-EVENT .
MOVE ZHMS_VW_MSGEV_LT-VERSN TO
ZHMS_TB_MSGEV_LT-VERSN .
MOVE ZHMS_VW_MSGEV_LT-CODLY TO
ZHMS_TB_MSGEV_LT-CODLY .
MOVE ZHMS_VW_MSGEV_LT-MANDT TO
ZHMS_TB_MSGEV_LT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MSGEV_LT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MSGEV_LT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MSGEV_LT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MSGEV_MT................................*
FORM GET_DATA_ZHMS_VW_MSGEV_MT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MSGEV_MT WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MSGEV_MT .
ZHMS_VW_MSGEV_MT-MANDT =
ZHMS_TB_MSGEV_MT-MANDT .
ZHMS_VW_MSGEV_MT-NATDC =
ZHMS_TB_MSGEV_MT-NATDC .
ZHMS_VW_MSGEV_MT-TYPED =
ZHMS_TB_MSGEV_MT-TYPED .
ZHMS_VW_MSGEV_MT-LOCTP =
ZHMS_TB_MSGEV_MT-LOCTP .
ZHMS_VW_MSGEV_MT-MENSG =
ZHMS_TB_MSGEV_MT-MENSG .
ZHMS_VW_MSGEV_MT-EVENT =
ZHMS_TB_MSGEV_MT-EVENT .
ZHMS_VW_MSGEV_MT-VERSN =
ZHMS_TB_MSGEV_MT-VERSN .
ZHMS_VW_MSGEV_MT-CODMT =
ZHMS_TB_MSGEV_MT-CODMT .
ZHMS_VW_MSGEV_MT-METHD =
ZHMS_TB_MSGEV_MT-METHD .
<VIM_TOTAL_STRUC> = ZHMS_VW_MSGEV_MT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MSGEV_MT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MSGEV_MT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MSGEV_MT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGEV_MT WHERE
  NATDC = ZHMS_VW_MSGEV_MT-NATDC AND
  TYPED = ZHMS_VW_MSGEV_MT-TYPED AND
  LOCTP = ZHMS_VW_MSGEV_MT-LOCTP AND
  MENSG = ZHMS_VW_MSGEV_MT-MENSG AND
  EVENT = ZHMS_VW_MSGEV_MT-EVENT AND
  VERSN = ZHMS_VW_MSGEV_MT-VERSN AND
  CODMT = ZHMS_VW_MSGEV_MT-CODMT .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MSGEV_MT .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGEV_MT WHERE
  NATDC = ZHMS_VW_MSGEV_MT-NATDC AND
  TYPED = ZHMS_VW_MSGEV_MT-TYPED AND
  LOCTP = ZHMS_VW_MSGEV_MT-LOCTP AND
  MENSG = ZHMS_VW_MSGEV_MT-MENSG AND
  EVENT = ZHMS_VW_MSGEV_MT-EVENT AND
  VERSN = ZHMS_VW_MSGEV_MT-VERSN AND
  CODMT = ZHMS_VW_MSGEV_MT-CODMT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MSGEV_MT.
    ENDIF.
ZHMS_TB_MSGEV_MT-MANDT =
ZHMS_VW_MSGEV_MT-MANDT .
ZHMS_TB_MSGEV_MT-NATDC =
ZHMS_VW_MSGEV_MT-NATDC .
ZHMS_TB_MSGEV_MT-TYPED =
ZHMS_VW_MSGEV_MT-TYPED .
ZHMS_TB_MSGEV_MT-LOCTP =
ZHMS_VW_MSGEV_MT-LOCTP .
ZHMS_TB_MSGEV_MT-MENSG =
ZHMS_VW_MSGEV_MT-MENSG .
ZHMS_TB_MSGEV_MT-EVENT =
ZHMS_VW_MSGEV_MT-EVENT .
ZHMS_TB_MSGEV_MT-VERSN =
ZHMS_VW_MSGEV_MT-VERSN .
ZHMS_TB_MSGEV_MT-CODMT =
ZHMS_VW_MSGEV_MT-CODMT .
ZHMS_TB_MSGEV_MT-METHD =
ZHMS_VW_MSGEV_MT-METHD .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MSGEV_MT ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MSGEV_MT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MSGEV_MT-UPD_FLAG,
STATUS_ZHMS_VW_MSGEV_MT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MSGEV_MT.
  SELECT SINGLE * FROM ZHMS_TB_MSGEV_MT WHERE
NATDC = ZHMS_VW_MSGEV_MT-NATDC AND
TYPED = ZHMS_VW_MSGEV_MT-TYPED AND
LOCTP = ZHMS_VW_MSGEV_MT-LOCTP AND
MENSG = ZHMS_VW_MSGEV_MT-MENSG AND
EVENT = ZHMS_VW_MSGEV_MT-EVENT AND
VERSN = ZHMS_VW_MSGEV_MT-VERSN AND
CODMT = ZHMS_VW_MSGEV_MT-CODMT .
ZHMS_VW_MSGEV_MT-MANDT =
ZHMS_TB_MSGEV_MT-MANDT .
ZHMS_VW_MSGEV_MT-NATDC =
ZHMS_TB_MSGEV_MT-NATDC .
ZHMS_VW_MSGEV_MT-TYPED =
ZHMS_TB_MSGEV_MT-TYPED .
ZHMS_VW_MSGEV_MT-LOCTP =
ZHMS_TB_MSGEV_MT-LOCTP .
ZHMS_VW_MSGEV_MT-MENSG =
ZHMS_TB_MSGEV_MT-MENSG .
ZHMS_VW_MSGEV_MT-EVENT =
ZHMS_TB_MSGEV_MT-EVENT .
ZHMS_VW_MSGEV_MT-VERSN =
ZHMS_TB_MSGEV_MT-VERSN .
ZHMS_VW_MSGEV_MT-CODMT =
ZHMS_TB_MSGEV_MT-CODMT .
ZHMS_VW_MSGEV_MT-METHD =
ZHMS_TB_MSGEV_MT-METHD .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MSGEV_MT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MSGEV_MT-NATDC TO
ZHMS_TB_MSGEV_MT-NATDC .
MOVE ZHMS_VW_MSGEV_MT-TYPED TO
ZHMS_TB_MSGEV_MT-TYPED .
MOVE ZHMS_VW_MSGEV_MT-LOCTP TO
ZHMS_TB_MSGEV_MT-LOCTP .
MOVE ZHMS_VW_MSGEV_MT-MENSG TO
ZHMS_TB_MSGEV_MT-MENSG .
MOVE ZHMS_VW_MSGEV_MT-EVENT TO
ZHMS_TB_MSGEV_MT-EVENT .
MOVE ZHMS_VW_MSGEV_MT-VERSN TO
ZHMS_TB_MSGEV_MT-VERSN .
MOVE ZHMS_VW_MSGEV_MT-CODMT TO
ZHMS_TB_MSGEV_MT-CODMT .
MOVE ZHMS_VW_MSGEV_MT-MANDT TO
ZHMS_TB_MSGEV_MT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MSGEV_MT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MSGEV_MT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MSGEV_MT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MSGE_VRS................................*
FORM GET_DATA_ZHMS_VW_MSGE_VRS.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MSGE_VRS WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MSGE_VRS .
ZHMS_VW_MSGE_VRS-MANDT =
ZHMS_TB_MSGE_VRS-MANDT .
ZHMS_VW_MSGE_VRS-NATDC =
ZHMS_TB_MSGE_VRS-NATDC .
ZHMS_VW_MSGE_VRS-TYPED =
ZHMS_TB_MSGE_VRS-TYPED .
ZHMS_VW_MSGE_VRS-LOCTP =
ZHMS_TB_MSGE_VRS-LOCTP .
ZHMS_VW_MSGE_VRS-MENSG =
ZHMS_TB_MSGE_VRS-MENSG .
ZHMS_VW_MSGE_VRS-EVENT =
ZHMS_TB_MSGE_VRS-EVENT .
ZHMS_VW_MSGE_VRS-VERSN =
ZHMS_TB_MSGE_VRS-VERSN .
ZHMS_VW_MSGE_VRS-ATIVO =
ZHMS_TB_MSGE_VRS-ATIVO .
<VIM_TOTAL_STRUC> = ZHMS_VW_MSGE_VRS.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MSGE_VRS .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MSGE_VRS.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MSGE_VRS-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGE_VRS WHERE
  NATDC = ZHMS_VW_MSGE_VRS-NATDC AND
  TYPED = ZHMS_VW_MSGE_VRS-TYPED AND
  LOCTP = ZHMS_VW_MSGE_VRS-LOCTP AND
  MENSG = ZHMS_VW_MSGE_VRS-MENSG AND
  EVENT = ZHMS_VW_MSGE_VRS-EVENT AND
  VERSN = ZHMS_VW_MSGE_VRS-VERSN .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MSGE_VRS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSGE_VRS WHERE
  NATDC = ZHMS_VW_MSGE_VRS-NATDC AND
  TYPED = ZHMS_VW_MSGE_VRS-TYPED AND
  LOCTP = ZHMS_VW_MSGE_VRS-LOCTP AND
  MENSG = ZHMS_VW_MSGE_VRS-MENSG AND
  EVENT = ZHMS_VW_MSGE_VRS-EVENT AND
  VERSN = ZHMS_VW_MSGE_VRS-VERSN .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MSGE_VRS.
    ENDIF.
ZHMS_TB_MSGE_VRS-MANDT =
ZHMS_VW_MSGE_VRS-MANDT .
ZHMS_TB_MSGE_VRS-NATDC =
ZHMS_VW_MSGE_VRS-NATDC .
ZHMS_TB_MSGE_VRS-TYPED =
ZHMS_VW_MSGE_VRS-TYPED .
ZHMS_TB_MSGE_VRS-LOCTP =
ZHMS_VW_MSGE_VRS-LOCTP .
ZHMS_TB_MSGE_VRS-MENSG =
ZHMS_VW_MSGE_VRS-MENSG .
ZHMS_TB_MSGE_VRS-EVENT =
ZHMS_VW_MSGE_VRS-EVENT .
ZHMS_TB_MSGE_VRS-VERSN =
ZHMS_VW_MSGE_VRS-VERSN .
ZHMS_TB_MSGE_VRS-ATIVO =
ZHMS_VW_MSGE_VRS-ATIVO .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MSGE_VRS ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MSGE_VRS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MSGE_VRS-UPD_FLAG,
STATUS_ZHMS_VW_MSGE_VRS-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MSGE_VRS.
  SELECT SINGLE * FROM ZHMS_TB_MSGE_VRS WHERE
NATDC = ZHMS_VW_MSGE_VRS-NATDC AND
TYPED = ZHMS_VW_MSGE_VRS-TYPED AND
LOCTP = ZHMS_VW_MSGE_VRS-LOCTP AND
MENSG = ZHMS_VW_MSGE_VRS-MENSG AND
EVENT = ZHMS_VW_MSGE_VRS-EVENT AND
VERSN = ZHMS_VW_MSGE_VRS-VERSN .
ZHMS_VW_MSGE_VRS-MANDT =
ZHMS_TB_MSGE_VRS-MANDT .
ZHMS_VW_MSGE_VRS-NATDC =
ZHMS_TB_MSGE_VRS-NATDC .
ZHMS_VW_MSGE_VRS-TYPED =
ZHMS_TB_MSGE_VRS-TYPED .
ZHMS_VW_MSGE_VRS-LOCTP =
ZHMS_TB_MSGE_VRS-LOCTP .
ZHMS_VW_MSGE_VRS-MENSG =
ZHMS_TB_MSGE_VRS-MENSG .
ZHMS_VW_MSGE_VRS-EVENT =
ZHMS_TB_MSGE_VRS-EVENT .
ZHMS_VW_MSGE_VRS-VERSN =
ZHMS_TB_MSGE_VRS-VERSN .
ZHMS_VW_MSGE_VRS-ATIVO =
ZHMS_TB_MSGE_VRS-ATIVO .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MSGE_VRS USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MSGE_VRS-NATDC TO
ZHMS_TB_MSGE_VRS-NATDC .
MOVE ZHMS_VW_MSGE_VRS-TYPED TO
ZHMS_TB_MSGE_VRS-TYPED .
MOVE ZHMS_VW_MSGE_VRS-LOCTP TO
ZHMS_TB_MSGE_VRS-LOCTP .
MOVE ZHMS_VW_MSGE_VRS-MENSG TO
ZHMS_TB_MSGE_VRS-MENSG .
MOVE ZHMS_VW_MSGE_VRS-EVENT TO
ZHMS_TB_MSGE_VRS-EVENT .
MOVE ZHMS_VW_MSGE_VRS-VERSN TO
ZHMS_TB_MSGE_VRS-VERSN .
MOVE ZHMS_VW_MSGE_VRS-MANDT TO
ZHMS_TB_MSGE_VRS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MSGE_VRS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MSGE_VRS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MSGE_VRS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_MSG_EVEN................................*
FORM GET_DATA_ZHMS_VW_MSG_EVEN.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MSG_EVEN WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MSG_EVEN .
ZHMS_VW_MSG_EVEN-MANDT =
ZHMS_TB_MSG_EVEN-MANDT .
ZHMS_VW_MSG_EVEN-NATDC =
ZHMS_TB_MSG_EVEN-NATDC .
ZHMS_VW_MSG_EVEN-TYPED =
ZHMS_TB_MSG_EVEN-TYPED .
ZHMS_VW_MSG_EVEN-LOCTP =
ZHMS_TB_MSG_EVEN-LOCTP .
ZHMS_VW_MSG_EVEN-MENSG =
ZHMS_TB_MSG_EVEN-MENSG .
ZHMS_VW_MSG_EVEN-EVENT =
ZHMS_TB_MSG_EVEN-EVENT .
ZHMS_VW_MSG_EVEN-EXEVT =
ZHMS_TB_MSG_EVEN-EXEVT .
<VIM_TOTAL_STRUC> = ZHMS_VW_MSG_EVEN.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MSG_EVEN .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MSG_EVEN.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MSG_EVEN-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSG_EVEN WHERE
  NATDC = ZHMS_VW_MSG_EVEN-NATDC AND
  TYPED = ZHMS_VW_MSG_EVEN-TYPED AND
  LOCTP = ZHMS_VW_MSG_EVEN-LOCTP AND
  MENSG = ZHMS_VW_MSG_EVEN-MENSG AND
  EVENT = ZHMS_VW_MSG_EVEN-EVENT .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MSG_EVEN .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MSG_EVEN WHERE
  NATDC = ZHMS_VW_MSG_EVEN-NATDC AND
  TYPED = ZHMS_VW_MSG_EVEN-TYPED AND
  LOCTP = ZHMS_VW_MSG_EVEN-LOCTP AND
  MENSG = ZHMS_VW_MSG_EVEN-MENSG AND
  EVENT = ZHMS_VW_MSG_EVEN-EVENT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MSG_EVEN.
    ENDIF.
ZHMS_TB_MSG_EVEN-MANDT =
ZHMS_VW_MSG_EVEN-MANDT .
ZHMS_TB_MSG_EVEN-NATDC =
ZHMS_VW_MSG_EVEN-NATDC .
ZHMS_TB_MSG_EVEN-TYPED =
ZHMS_VW_MSG_EVEN-TYPED .
ZHMS_TB_MSG_EVEN-LOCTP =
ZHMS_VW_MSG_EVEN-LOCTP .
ZHMS_TB_MSG_EVEN-MENSG =
ZHMS_VW_MSG_EVEN-MENSG .
ZHMS_TB_MSG_EVEN-EVENT =
ZHMS_VW_MSG_EVEN-EVENT .
ZHMS_TB_MSG_EVEN-EXEVT =
ZHMS_VW_MSG_EVEN-EXEVT .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MSG_EVEN ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MSG_EVEN .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MSG_EVEN-UPD_FLAG,
STATUS_ZHMS_VW_MSG_EVEN-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MSG_EVEN.
  SELECT SINGLE * FROM ZHMS_TB_MSG_EVEN WHERE
NATDC = ZHMS_VW_MSG_EVEN-NATDC AND
TYPED = ZHMS_VW_MSG_EVEN-TYPED AND
LOCTP = ZHMS_VW_MSG_EVEN-LOCTP AND
MENSG = ZHMS_VW_MSG_EVEN-MENSG AND
EVENT = ZHMS_VW_MSG_EVEN-EVENT .
ZHMS_VW_MSG_EVEN-MANDT =
ZHMS_TB_MSG_EVEN-MANDT .
ZHMS_VW_MSG_EVEN-NATDC =
ZHMS_TB_MSG_EVEN-NATDC .
ZHMS_VW_MSG_EVEN-TYPED =
ZHMS_TB_MSG_EVEN-TYPED .
ZHMS_VW_MSG_EVEN-LOCTP =
ZHMS_TB_MSG_EVEN-LOCTP .
ZHMS_VW_MSG_EVEN-MENSG =
ZHMS_TB_MSG_EVEN-MENSG .
ZHMS_VW_MSG_EVEN-EVENT =
ZHMS_TB_MSG_EVEN-EVENT .
ZHMS_VW_MSG_EVEN-EXEVT =
ZHMS_TB_MSG_EVEN-EXEVT .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MSG_EVEN USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MSG_EVEN-NATDC TO
ZHMS_TB_MSG_EVEN-NATDC .
MOVE ZHMS_VW_MSG_EVEN-TYPED TO
ZHMS_TB_MSG_EVEN-TYPED .
MOVE ZHMS_VW_MSG_EVEN-LOCTP TO
ZHMS_TB_MSG_EVEN-LOCTP .
MOVE ZHMS_VW_MSG_EVEN-MENSG TO
ZHMS_TB_MSG_EVEN-MENSG .
MOVE ZHMS_VW_MSG_EVEN-EVENT TO
ZHMS_TB_MSG_EVEN-EVENT .
MOVE ZHMS_VW_MSG_EVEN-MANDT TO
ZHMS_TB_MSG_EVEN-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MSG_EVEN'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MSG_EVEN TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MSG_EVEN'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_NATURE..................................*
FORM GET_DATA_ZHMS_VW_NATURE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_NATURE WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_NATURE .
ZHMS_VW_NATURE-MANDT =
ZHMS_TB_NATURE-MANDT .
ZHMS_VW_NATURE-NATDC =
ZHMS_TB_NATURE-NATDC .
ZHMS_VW_NATURE-ICONS =
ZHMS_TB_NATURE-ICONS .
ZHMS_VW_NATURE-DETSC =
ZHMS_TB_NATURE-DETSC .
    SELECT SINGLE * FROM ZHMS_TX_NATURE WHERE
NATDC = ZHMS_TB_NATURE-NATDC AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_NATURE-DENOM =
ZHMS_TX_NATURE-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_NATURE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_NATURE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_NATURE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_NATURE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_NATURE WHERE
  NATDC = ZHMS_VW_NATURE-NATDC .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_NATURE .
    ENDIF.
    DELETE FROM ZHMS_TX_NATURE WHERE
    NATDC = ZHMS_TB_NATURE-NATDC .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_NATURE WHERE
  NATDC = ZHMS_VW_NATURE-NATDC .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_NATURE.
    ENDIF.
ZHMS_TB_NATURE-MANDT =
ZHMS_VW_NATURE-MANDT .
ZHMS_TB_NATURE-NATDC =
ZHMS_VW_NATURE-NATDC .
ZHMS_TB_NATURE-ICONS =
ZHMS_VW_NATURE-ICONS .
ZHMS_TB_NATURE-DETSC =
ZHMS_VW_NATURE-DETSC .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_NATURE ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_NATURE .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_NATURE WHERE
    NATDC = ZHMS_TB_NATURE-NATDC AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_NATURE.
ZHMS_TX_NATURE-NATDC =
ZHMS_TB_NATURE-NATDC .
ZHMS_TX_NATURE-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_NATURE-DENOM =
ZHMS_VW_NATURE-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_NATURE ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_NATURE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_NATURE-UPD_FLAG,
STATUS_ZHMS_VW_NATURE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_NATURE.
  SELECT SINGLE * FROM ZHMS_TB_NATURE WHERE
NATDC = ZHMS_VW_NATURE-NATDC .
ZHMS_VW_NATURE-MANDT =
ZHMS_TB_NATURE-MANDT .
ZHMS_VW_NATURE-NATDC =
ZHMS_TB_NATURE-NATDC .
ZHMS_VW_NATURE-ICONS =
ZHMS_TB_NATURE-ICONS .
ZHMS_VW_NATURE-DETSC =
ZHMS_TB_NATURE-DETSC .
    SELECT SINGLE * FROM ZHMS_TX_NATURE WHERE
NATDC = ZHMS_TB_NATURE-NATDC AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_NATURE-DENOM =
ZHMS_TX_NATURE-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_NATURE-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_NATURE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_NATURE-NATDC TO
ZHMS_TB_NATURE-NATDC .
MOVE ZHMS_VW_NATURE-MANDT TO
ZHMS_TB_NATURE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_NATURE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_NATURE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_NATURE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_NATURE-NATDC TO
ZHMS_TX_NATURE-NATDC .
MOVE SY-LANGU TO
ZHMS_TX_NATURE-SPRAS .
MOVE ZHMS_VW_NATURE-MANDT TO
ZHMS_TX_NATURE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_NATURE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_NATURE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_NATURE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_PKGVLD..................................*
FORM GET_DATA_ZHMS_VW_PKGVLD.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_PKGVLD WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_PKGVLD .
ZHMS_VW_PKGVLD-MANDT =
ZHMS_TB_PKGVLD-MANDT .
ZHMS_VW_PKGVLD-VLDCD =
ZHMS_TB_PKGVLD-VLDCD .
ZHMS_VW_PKGVLD-DEROT =
ZHMS_TB_PKGVLD-DEROT .
    SELECT SINGLE * FROM ZHMS_TX_PKGVLD WHERE
VLDCD = ZHMS_TB_PKGVLD-VLDCD AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_PKGVLD-DENOM =
ZHMS_TX_PKGVLD-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_PKGVLD.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_PKGVLD .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_PKGVLD.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_PKGVLD-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_PKGVLD WHERE
  VLDCD = ZHMS_VW_PKGVLD-VLDCD .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_PKGVLD .
    ENDIF.
    DELETE FROM ZHMS_TX_PKGVLD WHERE
    VLDCD = ZHMS_TB_PKGVLD-VLDCD .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_PKGVLD WHERE
  VLDCD = ZHMS_VW_PKGVLD-VLDCD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_PKGVLD.
    ENDIF.
ZHMS_TB_PKGVLD-MANDT =
ZHMS_VW_PKGVLD-MANDT .
ZHMS_TB_PKGVLD-VLDCD =
ZHMS_VW_PKGVLD-VLDCD .
ZHMS_TB_PKGVLD-DEROT =
ZHMS_VW_PKGVLD-DEROT .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_PKGVLD ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_PKGVLD .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_PKGVLD WHERE
    VLDCD = ZHMS_TB_PKGVLD-VLDCD AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_PKGVLD.
ZHMS_TX_PKGVLD-VLDCD =
ZHMS_TB_PKGVLD-VLDCD .
ZHMS_TX_PKGVLD-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_PKGVLD-DENOM =
ZHMS_VW_PKGVLD-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_PKGVLD ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_PKGVLD .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_PKGVLD-UPD_FLAG,
STATUS_ZHMS_VW_PKGVLD-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_PKGVLD.
  SELECT SINGLE * FROM ZHMS_TB_PKGVLD WHERE
VLDCD = ZHMS_VW_PKGVLD-VLDCD .
ZHMS_VW_PKGVLD-MANDT =
ZHMS_TB_PKGVLD-MANDT .
ZHMS_VW_PKGVLD-VLDCD =
ZHMS_TB_PKGVLD-VLDCD .
ZHMS_VW_PKGVLD-DEROT =
ZHMS_TB_PKGVLD-DEROT .
    SELECT SINGLE * FROM ZHMS_TX_PKGVLD WHERE
VLDCD = ZHMS_TB_PKGVLD-VLDCD AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_PKGVLD-DENOM =
ZHMS_TX_PKGVLD-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_PKGVLD-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_PKGVLD USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_PKGVLD-VLDCD TO
ZHMS_TB_PKGVLD-VLDCD .
MOVE ZHMS_VW_PKGVLD-MANDT TO
ZHMS_TB_PKGVLD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_PKGVLD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_PKGVLD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_PKGVLD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_PKGVLD-VLDCD TO
ZHMS_TX_PKGVLD-VLDCD .
MOVE SY-LANGU TO
ZHMS_TX_PKGVLD-SPRAS .
MOVE ZHMS_VW_PKGVLD-MANDT TO
ZHMS_TX_PKGVLD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_PKGVLD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_PKGVLD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_PKGVLD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_REGVLD..................................*
FORM GET_DATA_ZHMS_VW_REGVLD.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_REGVLD WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_REGVLD .
ZHMS_VW_REGVLD-MANDT =
ZHMS_TB_REGVLD-MANDT .
ZHMS_VW_REGVLD-VLDCD =
ZHMS_TB_REGVLD-VLDCD .
ZHMS_VW_REGVLD-REGCD =
ZHMS_TB_REGVLD-REGCD .
ZHMS_VW_REGVLD-ISGRP =
ZHMS_TB_REGVLD-ISGRP .
ZHMS_VW_REGVLD-GRPCD =
ZHMS_TB_REGVLD-GRPCD .
ZHMS_VW_REGVLD-PREDE =
ZHMS_TB_REGVLD-PREDE .
ZHMS_VW_REGVLD-MNEUM =
ZHMS_TB_REGVLD-MNEUM .
ZHMS_VW_REGVLD-OPERA =
ZHMS_TB_REGVLD-OPERA .
ZHMS_VW_REGVLD-TPVAR =
ZHMS_TB_REGVLD-TPVAR .
ZHMS_VW_REGVLD-TBNAM =
ZHMS_TB_REGVLD-TBNAM .
ZHMS_VW_REGVLD-TBFLD =
ZHMS_TB_REGVLD-TBFLD .
ZHMS_VW_REGVLD-VLFIX =
ZHMS_TB_REGVLD-VLFIX .
ZHMS_VW_REGVLD-ROTIN =
ZHMS_TB_REGVLD-ROTIN .
ZHMS_VW_REGVLD-CRITI =
ZHMS_TB_REGVLD-CRITI .
    SELECT SINGLE * FROM ZHMS_TX_REGVLD WHERE
VLDCD = ZHMS_TB_REGVLD-VLDCD AND
REGCD = ZHMS_TB_REGVLD-REGCD AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_REGVLD-LTEXT =
ZHMS_TX_REGVLD-LTEXT .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_REGVLD.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_REGVLD .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_REGVLD.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_REGVLD-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_REGVLD WHERE
  VLDCD = ZHMS_VW_REGVLD-VLDCD AND
  REGCD = ZHMS_VW_REGVLD-REGCD .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_REGVLD .
    ENDIF.
    DELETE FROM ZHMS_TX_REGVLD WHERE
    VLDCD = ZHMS_TB_REGVLD-VLDCD AND
    REGCD = ZHMS_TB_REGVLD-REGCD .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_REGVLD WHERE
  VLDCD = ZHMS_VW_REGVLD-VLDCD AND
  REGCD = ZHMS_VW_REGVLD-REGCD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_REGVLD.
    ENDIF.
ZHMS_TB_REGVLD-MANDT =
ZHMS_VW_REGVLD-MANDT .
ZHMS_TB_REGVLD-VLDCD =
ZHMS_VW_REGVLD-VLDCD .
ZHMS_TB_REGVLD-REGCD =
ZHMS_VW_REGVLD-REGCD .
ZHMS_TB_REGVLD-ISGRP =
ZHMS_VW_REGVLD-ISGRP .
ZHMS_TB_REGVLD-GRPCD =
ZHMS_VW_REGVLD-GRPCD .
ZHMS_TB_REGVLD-PREDE =
ZHMS_VW_REGVLD-PREDE .
ZHMS_TB_REGVLD-MNEUM =
ZHMS_VW_REGVLD-MNEUM .
ZHMS_TB_REGVLD-OPERA =
ZHMS_VW_REGVLD-OPERA .
ZHMS_TB_REGVLD-TPVAR =
ZHMS_VW_REGVLD-TPVAR .
ZHMS_TB_REGVLD-TBNAM =
ZHMS_VW_REGVLD-TBNAM .
ZHMS_TB_REGVLD-TBFLD =
ZHMS_VW_REGVLD-TBFLD .
ZHMS_TB_REGVLD-VLFIX =
ZHMS_VW_REGVLD-VLFIX .
ZHMS_TB_REGVLD-ROTIN =
ZHMS_VW_REGVLD-ROTIN .
ZHMS_TB_REGVLD-CRITI =
ZHMS_VW_REGVLD-CRITI .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_REGVLD ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_REGVLD .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_REGVLD WHERE
    VLDCD = ZHMS_TB_REGVLD-VLDCD AND
    REGCD = ZHMS_TB_REGVLD-REGCD AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_REGVLD.
ZHMS_TX_REGVLD-VLDCD =
ZHMS_TB_REGVLD-VLDCD .
ZHMS_TX_REGVLD-REGCD =
ZHMS_TB_REGVLD-REGCD .
ZHMS_TX_REGVLD-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_REGVLD-LTEXT =
ZHMS_VW_REGVLD-LTEXT .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_REGVLD ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_REGVLD .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_REGVLD-UPD_FLAG,
STATUS_ZHMS_VW_REGVLD-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_REGVLD.
  SELECT SINGLE * FROM ZHMS_TB_REGVLD WHERE
VLDCD = ZHMS_VW_REGVLD-VLDCD AND
REGCD = ZHMS_VW_REGVLD-REGCD .
ZHMS_VW_REGVLD-MANDT =
ZHMS_TB_REGVLD-MANDT .
ZHMS_VW_REGVLD-VLDCD =
ZHMS_TB_REGVLD-VLDCD .
ZHMS_VW_REGVLD-REGCD =
ZHMS_TB_REGVLD-REGCD .
ZHMS_VW_REGVLD-ISGRP =
ZHMS_TB_REGVLD-ISGRP .
ZHMS_VW_REGVLD-GRPCD =
ZHMS_TB_REGVLD-GRPCD .
ZHMS_VW_REGVLD-PREDE =
ZHMS_TB_REGVLD-PREDE .
ZHMS_VW_REGVLD-MNEUM =
ZHMS_TB_REGVLD-MNEUM .
ZHMS_VW_REGVLD-OPERA =
ZHMS_TB_REGVLD-OPERA .
ZHMS_VW_REGVLD-TPVAR =
ZHMS_TB_REGVLD-TPVAR .
ZHMS_VW_REGVLD-TBNAM =
ZHMS_TB_REGVLD-TBNAM .
ZHMS_VW_REGVLD-TBFLD =
ZHMS_TB_REGVLD-TBFLD .
ZHMS_VW_REGVLD-VLFIX =
ZHMS_TB_REGVLD-VLFIX .
ZHMS_VW_REGVLD-ROTIN =
ZHMS_TB_REGVLD-ROTIN .
ZHMS_VW_REGVLD-CRITI =
ZHMS_TB_REGVLD-CRITI .
    SELECT SINGLE * FROM ZHMS_TX_REGVLD WHERE
VLDCD = ZHMS_TB_REGVLD-VLDCD AND
REGCD = ZHMS_TB_REGVLD-REGCD AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_REGVLD-LTEXT =
ZHMS_TX_REGVLD-LTEXT .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_REGVLD-LTEXT .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_REGVLD USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_REGVLD-VLDCD TO
ZHMS_TB_REGVLD-VLDCD .
MOVE ZHMS_VW_REGVLD-REGCD TO
ZHMS_TB_REGVLD-REGCD .
MOVE ZHMS_VW_REGVLD-MANDT TO
ZHMS_TB_REGVLD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_REGVLD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_REGVLD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_REGVLD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_REGVLD-VLDCD TO
ZHMS_TX_REGVLD-VLDCD .
MOVE ZHMS_TB_REGVLD-REGCD TO
ZHMS_TX_REGVLD-REGCD .
MOVE SY-LANGU TO
ZHMS_TX_REGVLD-SPRAS .
MOVE ZHMS_VW_REGVLD-MANDT TO
ZHMS_TX_REGVLD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_REGVLD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_REGVLD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_REGVLD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_SCENARIO................................*
FORM GET_DATA_ZHMS_VW_SCENARIO.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_SCENARIO WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_SCENARIO .
ZHMS_VW_SCENARIO-MANDT =
ZHMS_TB_SCENARIO-MANDT .
ZHMS_VW_SCENARIO-NATDC =
ZHMS_TB_SCENARIO-NATDC .
ZHMS_VW_SCENARIO-TYPED =
ZHMS_TB_SCENARIO-TYPED .
ZHMS_VW_SCENARIO-LOCTP =
ZHMS_TB_SCENARIO-LOCTP .
ZHMS_VW_SCENARIO-SCENA =
ZHMS_TB_SCENARIO-SCENA .
ZHMS_VW_SCENARIO-ROTIN =
ZHMS_TB_SCENARIO-ROTIN .
ZHMS_VW_SCENARIO-DEFAU =
ZHMS_TB_SCENARIO-DEFAU .
ZHMS_VW_SCENARIO-GATE =
ZHMS_TB_SCENARIO-GATE .
ZHMS_VW_SCENARIO-VLDCD =
ZHMS_TB_SCENARIO-VLDCD .
    SELECT SINGLE * FROM ZHMS_TX_SCENARIO WHERE
NATDC = ZHMS_TB_SCENARIO-NATDC AND
TYPED = ZHMS_TB_SCENARIO-TYPED AND
LOCTP = ZHMS_TB_SCENARIO-LOCTP AND
SCENA = ZHMS_TB_SCENARIO-SCENA AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_SCENARIO-DENOM =
ZHMS_TX_SCENARIO-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_SCENARIO.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_SCENARIO .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_SCENARIO.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_SCENARIO-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_SCENARIO WHERE
  NATDC = ZHMS_VW_SCENARIO-NATDC AND
  TYPED = ZHMS_VW_SCENARIO-TYPED AND
  LOCTP = ZHMS_VW_SCENARIO-LOCTP AND
  SCENA = ZHMS_VW_SCENARIO-SCENA .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_SCENARIO .
    ENDIF.
    DELETE FROM ZHMS_TX_SCENARIO WHERE
    NATDC = ZHMS_TB_SCENARIO-NATDC AND
    TYPED = ZHMS_TB_SCENARIO-TYPED AND
    LOCTP = ZHMS_TB_SCENARIO-LOCTP AND
    SCENA = ZHMS_TB_SCENARIO-SCENA .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_SCENARIO WHERE
  NATDC = ZHMS_VW_SCENARIO-NATDC AND
  TYPED = ZHMS_VW_SCENARIO-TYPED AND
  LOCTP = ZHMS_VW_SCENARIO-LOCTP AND
  SCENA = ZHMS_VW_SCENARIO-SCENA .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_SCENARIO.
    ENDIF.
ZHMS_TB_SCENARIO-MANDT =
ZHMS_VW_SCENARIO-MANDT .
ZHMS_TB_SCENARIO-NATDC =
ZHMS_VW_SCENARIO-NATDC .
ZHMS_TB_SCENARIO-TYPED =
ZHMS_VW_SCENARIO-TYPED .
ZHMS_TB_SCENARIO-LOCTP =
ZHMS_VW_SCENARIO-LOCTP .
ZHMS_TB_SCENARIO-SCENA =
ZHMS_VW_SCENARIO-SCENA .
ZHMS_TB_SCENARIO-ROTIN =
ZHMS_VW_SCENARIO-ROTIN .
ZHMS_TB_SCENARIO-DEFAU =
ZHMS_VW_SCENARIO-DEFAU .
ZHMS_TB_SCENARIO-GATE =
ZHMS_VW_SCENARIO-GATE .
ZHMS_TB_SCENARIO-VLDCD =
ZHMS_VW_SCENARIO-VLDCD .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_SCENARIO ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_SCENARIO .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_SCENARIO WHERE
    NATDC = ZHMS_TB_SCENARIO-NATDC AND
    TYPED = ZHMS_TB_SCENARIO-TYPED AND
    LOCTP = ZHMS_TB_SCENARIO-LOCTP AND
    SCENA = ZHMS_TB_SCENARIO-SCENA AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_SCENARIO.
ZHMS_TX_SCENARIO-NATDC =
ZHMS_TB_SCENARIO-NATDC .
ZHMS_TX_SCENARIO-TYPED =
ZHMS_TB_SCENARIO-TYPED .
ZHMS_TX_SCENARIO-LOCTP =
ZHMS_TB_SCENARIO-LOCTP .
ZHMS_TX_SCENARIO-SCENA =
ZHMS_TB_SCENARIO-SCENA .
ZHMS_TX_SCENARIO-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_SCENARIO-DENOM =
ZHMS_VW_SCENARIO-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_SCENARIO ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_SCENARIO .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_SCENARIO-UPD_FLAG,
STATUS_ZHMS_VW_SCENARIO-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_SCENARIO.
  SELECT SINGLE * FROM ZHMS_TB_SCENARIO WHERE
NATDC = ZHMS_VW_SCENARIO-NATDC AND
TYPED = ZHMS_VW_SCENARIO-TYPED AND
LOCTP = ZHMS_VW_SCENARIO-LOCTP AND
SCENA = ZHMS_VW_SCENARIO-SCENA .
ZHMS_VW_SCENARIO-MANDT =
ZHMS_TB_SCENARIO-MANDT .
ZHMS_VW_SCENARIO-NATDC =
ZHMS_TB_SCENARIO-NATDC .
ZHMS_VW_SCENARIO-TYPED =
ZHMS_TB_SCENARIO-TYPED .
ZHMS_VW_SCENARIO-LOCTP =
ZHMS_TB_SCENARIO-LOCTP .
ZHMS_VW_SCENARIO-SCENA =
ZHMS_TB_SCENARIO-SCENA .
ZHMS_VW_SCENARIO-ROTIN =
ZHMS_TB_SCENARIO-ROTIN .
ZHMS_VW_SCENARIO-DEFAU =
ZHMS_TB_SCENARIO-DEFAU .
ZHMS_VW_SCENARIO-GATE =
ZHMS_TB_SCENARIO-GATE .
ZHMS_VW_SCENARIO-VLDCD =
ZHMS_TB_SCENARIO-VLDCD .
    SELECT SINGLE * FROM ZHMS_TX_SCENARIO WHERE
NATDC = ZHMS_TB_SCENARIO-NATDC AND
TYPED = ZHMS_TB_SCENARIO-TYPED AND
LOCTP = ZHMS_TB_SCENARIO-LOCTP AND
SCENA = ZHMS_TB_SCENARIO-SCENA AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_SCENARIO-DENOM =
ZHMS_TX_SCENARIO-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_SCENARIO-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_SCENARIO USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_SCENARIO-NATDC TO
ZHMS_TB_SCENARIO-NATDC .
MOVE ZHMS_VW_SCENARIO-TYPED TO
ZHMS_TB_SCENARIO-TYPED .
MOVE ZHMS_VW_SCENARIO-LOCTP TO
ZHMS_TB_SCENARIO-LOCTP .
MOVE ZHMS_VW_SCENARIO-SCENA TO
ZHMS_TB_SCENARIO-SCENA .
MOVE ZHMS_VW_SCENARIO-MANDT TO
ZHMS_TB_SCENARIO-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_SCENARIO'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_SCENARIO TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_SCENARIO'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_SCENARIO-NATDC TO
ZHMS_TX_SCENARIO-NATDC .
MOVE ZHMS_TB_SCENARIO-TYPED TO
ZHMS_TX_SCENARIO-TYPED .
MOVE ZHMS_TB_SCENARIO-LOCTP TO
ZHMS_TX_SCENARIO-LOCTP .
MOVE ZHMS_TB_SCENARIO-SCENA TO
ZHMS_TX_SCENARIO-SCENA .
MOVE SY-LANGU TO
ZHMS_TX_SCENARIO-SPRAS .
MOVE ZHMS_VW_SCENARIO-MANDT TO
ZHMS_TX_SCENARIO-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_SCENARIO'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_SCENARIO TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_SCENARIO'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_SCENFLOC................................*
FORM GET_DATA_ZHMS_VW_SCENFLOC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_SCENFLOC WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_SCENFLOC .
ZHMS_VW_SCENFLOC-MANDT =
ZHMS_TB_SCENFLOC-MANDT .
ZHMS_VW_SCENFLOC-NATDC =
ZHMS_TB_SCENFLOC-NATDC .
ZHMS_VW_SCENFLOC-TYPED =
ZHMS_TB_SCENFLOC-TYPED .
ZHMS_VW_SCENFLOC-LOCTP =
ZHMS_TB_SCENFLOC-LOCTP .
ZHMS_VW_SCENFLOC-SCENA =
ZHMS_TB_SCENFLOC-SCENA .
ZHMS_VW_SCENFLOC-FLOWD =
ZHMS_TB_SCENFLOC-FLOWD .
ZHMS_VW_SCENFLOC-DENOM =
ZHMS_TB_SCENFLOC-DENOM .
ZHMS_VW_SCENFLOC-CODMP =
ZHMS_TB_SCENFLOC-CODMP .
<VIM_TOTAL_STRUC> = ZHMS_VW_SCENFLOC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_SCENFLOC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_SCENFLOC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_SCENFLOC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_SCENFLOC WHERE
  NATDC = ZHMS_VW_SCENFLOC-NATDC AND
  TYPED = ZHMS_VW_SCENFLOC-TYPED AND
  LOCTP = ZHMS_VW_SCENFLOC-LOCTP AND
  SCENA = ZHMS_VW_SCENFLOC-SCENA AND
  FLOWD = ZHMS_VW_SCENFLOC-FLOWD .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_SCENFLOC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_SCENFLOC WHERE
  NATDC = ZHMS_VW_SCENFLOC-NATDC AND
  TYPED = ZHMS_VW_SCENFLOC-TYPED AND
  LOCTP = ZHMS_VW_SCENFLOC-LOCTP AND
  SCENA = ZHMS_VW_SCENFLOC-SCENA AND
  FLOWD = ZHMS_VW_SCENFLOC-FLOWD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_SCENFLOC.
    ENDIF.
ZHMS_TB_SCENFLOC-MANDT =
ZHMS_VW_SCENFLOC-MANDT .
ZHMS_TB_SCENFLOC-NATDC =
ZHMS_VW_SCENFLOC-NATDC .
ZHMS_TB_SCENFLOC-TYPED =
ZHMS_VW_SCENFLOC-TYPED .
ZHMS_TB_SCENFLOC-LOCTP =
ZHMS_VW_SCENFLOC-LOCTP .
ZHMS_TB_SCENFLOC-SCENA =
ZHMS_VW_SCENFLOC-SCENA .
ZHMS_TB_SCENFLOC-FLOWD =
ZHMS_VW_SCENFLOC-FLOWD .
ZHMS_TB_SCENFLOC-DENOM =
ZHMS_VW_SCENFLOC-DENOM .
ZHMS_TB_SCENFLOC-CODMP =
ZHMS_VW_SCENFLOC-CODMP .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_SCENFLOC ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_SCENFLOC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_SCENFLOC-UPD_FLAG,
STATUS_ZHMS_VW_SCENFLOC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_SCENFLOC.
  SELECT SINGLE * FROM ZHMS_TB_SCENFLOC WHERE
NATDC = ZHMS_VW_SCENFLOC-NATDC AND
TYPED = ZHMS_VW_SCENFLOC-TYPED AND
LOCTP = ZHMS_VW_SCENFLOC-LOCTP AND
SCENA = ZHMS_VW_SCENFLOC-SCENA AND
FLOWD = ZHMS_VW_SCENFLOC-FLOWD .
ZHMS_VW_SCENFLOC-MANDT =
ZHMS_TB_SCENFLOC-MANDT .
ZHMS_VW_SCENFLOC-NATDC =
ZHMS_TB_SCENFLOC-NATDC .
ZHMS_VW_SCENFLOC-TYPED =
ZHMS_TB_SCENFLOC-TYPED .
ZHMS_VW_SCENFLOC-LOCTP =
ZHMS_TB_SCENFLOC-LOCTP .
ZHMS_VW_SCENFLOC-SCENA =
ZHMS_TB_SCENFLOC-SCENA .
ZHMS_VW_SCENFLOC-FLOWD =
ZHMS_TB_SCENFLOC-FLOWD .
ZHMS_VW_SCENFLOC-DENOM =
ZHMS_TB_SCENFLOC-DENOM .
ZHMS_VW_SCENFLOC-CODMP =
ZHMS_TB_SCENFLOC-CODMP .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_SCENFLOC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_SCENFLOC-NATDC TO
ZHMS_TB_SCENFLOC-NATDC .
MOVE ZHMS_VW_SCENFLOC-TYPED TO
ZHMS_TB_SCENFLOC-TYPED .
MOVE ZHMS_VW_SCENFLOC-LOCTP TO
ZHMS_TB_SCENFLOC-LOCTP .
MOVE ZHMS_VW_SCENFLOC-SCENA TO
ZHMS_TB_SCENFLOC-SCENA .
MOVE ZHMS_VW_SCENFLOC-FLOWD TO
ZHMS_TB_SCENFLOC-FLOWD .
MOVE ZHMS_VW_SCENFLOC-MANDT TO
ZHMS_TB_SCENFLOC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_SCENFLOC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_SCENFLOC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_SCENFLOC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_SCEN_FLO................................*
FORM GET_DATA_ZHMS_VW_SCEN_FLO.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_SCEN_FLO WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_SCEN_FLO .
ZHMS_VW_SCEN_FLO-MANDT =
ZHMS_TB_SCEN_FLO-MANDT .
ZHMS_VW_SCEN_FLO-NATDC =
ZHMS_TB_SCEN_FLO-NATDC .
ZHMS_VW_SCEN_FLO-TYPED =
ZHMS_TB_SCEN_FLO-TYPED .
ZHMS_VW_SCEN_FLO-LOCTP =
ZHMS_TB_SCEN_FLO-LOCTP .
ZHMS_VW_SCEN_FLO-SCENA =
ZHMS_TB_SCEN_FLO-SCENA .
ZHMS_VW_SCEN_FLO-FLOWD =
ZHMS_TB_SCEN_FLO-FLOWD .
ZHMS_VW_SCEN_FLO-METPR =
ZHMS_TB_SCEN_FLO-METPR .
ZHMS_VW_SCEN_FLO-TPPRM =
ZHMS_TB_SCEN_FLO-TPPRM .
ZHMS_VW_SCEN_FLO-VLDCD =
ZHMS_TB_SCEN_FLO-VLDCD .
ZHMS_VW_SCEN_FLO-CODMP =
ZHMS_TB_SCEN_FLO-CODMP .
ZHMS_VW_SCEN_FLO-FUNCT =
ZHMS_TB_SCEN_FLO-FUNCT .
ZHMS_VW_SCEN_FLO-EVENT_C =
ZHMS_TB_SCEN_FLO-EVENT_C .
ZHMS_VW_SCEN_FLO-TCODE =
ZHMS_TB_SCEN_FLO-TCODE .
ZHMS_VW_SCEN_FLO-MNDOC =
ZHMS_TB_SCEN_FLO-MNDOC .
ZHMS_VW_SCEN_FLO-MNYEA =
ZHMS_TB_SCEN_FLO-MNYEA .
ZHMS_VW_SCEN_FLO-TPADC =
ZHMS_TB_SCEN_FLO-TPADC .
ZHMS_VW_SCEN_FLO-TPAYE =
ZHMS_TB_SCEN_FLO-TPAYE .
ZHMS_VW_SCEN_FLO-CODMP_ESTORNO =
ZHMS_TB_SCEN_FLO-CODMP_ESTORNO .
ZHMS_VW_SCEN_FLO-FUNCT_ESTORNO =
ZHMS_TB_SCEN_FLO-FUNCT_ESTORNO .
    SELECT SINGLE * FROM ZHMS_TX_SCEN_FLO WHERE
NATDC = ZHMS_TB_SCEN_FLO-NATDC AND
TYPED = ZHMS_TB_SCEN_FLO-TYPED AND
LOCTP = ZHMS_TB_SCEN_FLO-LOCTP AND
SCENA = ZHMS_TB_SCEN_FLO-SCENA AND
FLOWD = ZHMS_TB_SCEN_FLO-FLOWD AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_SCEN_FLO-DENOM =
ZHMS_TX_SCEN_FLO-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_SCEN_FLO.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_SCEN_FLO .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_SCEN_FLO.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_SCEN_FLO-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_SCEN_FLO WHERE
  NATDC = ZHMS_VW_SCEN_FLO-NATDC AND
  TYPED = ZHMS_VW_SCEN_FLO-TYPED AND
  LOCTP = ZHMS_VW_SCEN_FLO-LOCTP AND
  SCENA = ZHMS_VW_SCEN_FLO-SCENA AND
  FLOWD = ZHMS_VW_SCEN_FLO-FLOWD .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_SCEN_FLO .
    ENDIF.
    DELETE FROM ZHMS_TX_SCEN_FLO WHERE
    NATDC = ZHMS_TB_SCEN_FLO-NATDC AND
    TYPED = ZHMS_TB_SCEN_FLO-TYPED AND
    LOCTP = ZHMS_TB_SCEN_FLO-LOCTP AND
    SCENA = ZHMS_TB_SCEN_FLO-SCENA AND
    FLOWD = ZHMS_TB_SCEN_FLO-FLOWD .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_SCEN_FLO WHERE
  NATDC = ZHMS_VW_SCEN_FLO-NATDC AND
  TYPED = ZHMS_VW_SCEN_FLO-TYPED AND
  LOCTP = ZHMS_VW_SCEN_FLO-LOCTP AND
  SCENA = ZHMS_VW_SCEN_FLO-SCENA AND
  FLOWD = ZHMS_VW_SCEN_FLO-FLOWD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_SCEN_FLO.
    ENDIF.
ZHMS_TB_SCEN_FLO-MANDT =
ZHMS_VW_SCEN_FLO-MANDT .
ZHMS_TB_SCEN_FLO-NATDC =
ZHMS_VW_SCEN_FLO-NATDC .
ZHMS_TB_SCEN_FLO-TYPED =
ZHMS_VW_SCEN_FLO-TYPED .
ZHMS_TB_SCEN_FLO-LOCTP =
ZHMS_VW_SCEN_FLO-LOCTP .
ZHMS_TB_SCEN_FLO-SCENA =
ZHMS_VW_SCEN_FLO-SCENA .
ZHMS_TB_SCEN_FLO-FLOWD =
ZHMS_VW_SCEN_FLO-FLOWD .
ZHMS_TB_SCEN_FLO-METPR =
ZHMS_VW_SCEN_FLO-METPR .
ZHMS_TB_SCEN_FLO-TPPRM =
ZHMS_VW_SCEN_FLO-TPPRM .
ZHMS_TB_SCEN_FLO-VLDCD =
ZHMS_VW_SCEN_FLO-VLDCD .
ZHMS_TB_SCEN_FLO-CODMP =
ZHMS_VW_SCEN_FLO-CODMP .
ZHMS_TB_SCEN_FLO-FUNCT =
ZHMS_VW_SCEN_FLO-FUNCT .
ZHMS_TB_SCEN_FLO-EVENT_C =
ZHMS_VW_SCEN_FLO-EVENT_C .
ZHMS_TB_SCEN_FLO-TCODE =
ZHMS_VW_SCEN_FLO-TCODE .
ZHMS_TB_SCEN_FLO-MNDOC =
ZHMS_VW_SCEN_FLO-MNDOC .
ZHMS_TB_SCEN_FLO-MNYEA =
ZHMS_VW_SCEN_FLO-MNYEA .
ZHMS_TB_SCEN_FLO-TPADC =
ZHMS_VW_SCEN_FLO-TPADC .
ZHMS_TB_SCEN_FLO-TPAYE =
ZHMS_VW_SCEN_FLO-TPAYE .
ZHMS_TB_SCEN_FLO-CODMP_ESTORNO =
ZHMS_VW_SCEN_FLO-CODMP_ESTORNO .
ZHMS_TB_SCEN_FLO-FUNCT_ESTORNO =
ZHMS_VW_SCEN_FLO-FUNCT_ESTORNO .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_SCEN_FLO ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_SCEN_FLO .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_SCEN_FLO WHERE
    NATDC = ZHMS_TB_SCEN_FLO-NATDC AND
    TYPED = ZHMS_TB_SCEN_FLO-TYPED AND
    LOCTP = ZHMS_TB_SCEN_FLO-LOCTP AND
    SCENA = ZHMS_TB_SCEN_FLO-SCENA AND
    FLOWD = ZHMS_TB_SCEN_FLO-FLOWD AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_SCEN_FLO.
ZHMS_TX_SCEN_FLO-NATDC =
ZHMS_TB_SCEN_FLO-NATDC .
ZHMS_TX_SCEN_FLO-TYPED =
ZHMS_TB_SCEN_FLO-TYPED .
ZHMS_TX_SCEN_FLO-LOCTP =
ZHMS_TB_SCEN_FLO-LOCTP .
ZHMS_TX_SCEN_FLO-SCENA =
ZHMS_TB_SCEN_FLO-SCENA .
ZHMS_TX_SCEN_FLO-FLOWD =
ZHMS_TB_SCEN_FLO-FLOWD .
ZHMS_TX_SCEN_FLO-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_SCEN_FLO-DENOM =
ZHMS_VW_SCEN_FLO-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_SCEN_FLO ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_SCEN_FLO .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_SCEN_FLO-UPD_FLAG,
STATUS_ZHMS_VW_SCEN_FLO-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_SCEN_FLO.
  SELECT SINGLE * FROM ZHMS_TB_SCEN_FLO WHERE
NATDC = ZHMS_VW_SCEN_FLO-NATDC AND
TYPED = ZHMS_VW_SCEN_FLO-TYPED AND
LOCTP = ZHMS_VW_SCEN_FLO-LOCTP AND
SCENA = ZHMS_VW_SCEN_FLO-SCENA AND
FLOWD = ZHMS_VW_SCEN_FLO-FLOWD .
ZHMS_VW_SCEN_FLO-MANDT =
ZHMS_TB_SCEN_FLO-MANDT .
ZHMS_VW_SCEN_FLO-NATDC =
ZHMS_TB_SCEN_FLO-NATDC .
ZHMS_VW_SCEN_FLO-TYPED =
ZHMS_TB_SCEN_FLO-TYPED .
ZHMS_VW_SCEN_FLO-LOCTP =
ZHMS_TB_SCEN_FLO-LOCTP .
ZHMS_VW_SCEN_FLO-SCENA =
ZHMS_TB_SCEN_FLO-SCENA .
ZHMS_VW_SCEN_FLO-FLOWD =
ZHMS_TB_SCEN_FLO-FLOWD .
ZHMS_VW_SCEN_FLO-METPR =
ZHMS_TB_SCEN_FLO-METPR .
ZHMS_VW_SCEN_FLO-TPPRM =
ZHMS_TB_SCEN_FLO-TPPRM .
ZHMS_VW_SCEN_FLO-VLDCD =
ZHMS_TB_SCEN_FLO-VLDCD .
ZHMS_VW_SCEN_FLO-CODMP =
ZHMS_TB_SCEN_FLO-CODMP .
ZHMS_VW_SCEN_FLO-FUNCT =
ZHMS_TB_SCEN_FLO-FUNCT .
ZHMS_VW_SCEN_FLO-EVENT_C =
ZHMS_TB_SCEN_FLO-EVENT_C .
ZHMS_VW_SCEN_FLO-TCODE =
ZHMS_TB_SCEN_FLO-TCODE .
ZHMS_VW_SCEN_FLO-MNDOC =
ZHMS_TB_SCEN_FLO-MNDOC .
ZHMS_VW_SCEN_FLO-MNYEA =
ZHMS_TB_SCEN_FLO-MNYEA .
ZHMS_VW_SCEN_FLO-TPADC =
ZHMS_TB_SCEN_FLO-TPADC .
ZHMS_VW_SCEN_FLO-TPAYE =
ZHMS_TB_SCEN_FLO-TPAYE .
ZHMS_VW_SCEN_FLO-CODMP_ESTORNO =
ZHMS_TB_SCEN_FLO-CODMP_ESTORNO .
ZHMS_VW_SCEN_FLO-FUNCT_ESTORNO =
ZHMS_TB_SCEN_FLO-FUNCT_ESTORNO .
    SELECT SINGLE * FROM ZHMS_TX_SCEN_FLO WHERE
NATDC = ZHMS_TB_SCEN_FLO-NATDC AND
TYPED = ZHMS_TB_SCEN_FLO-TYPED AND
LOCTP = ZHMS_TB_SCEN_FLO-LOCTP AND
SCENA = ZHMS_TB_SCEN_FLO-SCENA AND
FLOWD = ZHMS_TB_SCEN_FLO-FLOWD AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_SCEN_FLO-DENOM =
ZHMS_TX_SCEN_FLO-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_SCEN_FLO-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_SCEN_FLO USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_SCEN_FLO-NATDC TO
ZHMS_TB_SCEN_FLO-NATDC .
MOVE ZHMS_VW_SCEN_FLO-TYPED TO
ZHMS_TB_SCEN_FLO-TYPED .
MOVE ZHMS_VW_SCEN_FLO-LOCTP TO
ZHMS_TB_SCEN_FLO-LOCTP .
MOVE ZHMS_VW_SCEN_FLO-SCENA TO
ZHMS_TB_SCEN_FLO-SCENA .
MOVE ZHMS_VW_SCEN_FLO-FLOWD TO
ZHMS_TB_SCEN_FLO-FLOWD .
MOVE ZHMS_VW_SCEN_FLO-MANDT TO
ZHMS_TB_SCEN_FLO-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_SCEN_FLO'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_SCEN_FLO TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_SCEN_FLO'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_SCEN_FLO-NATDC TO
ZHMS_TX_SCEN_FLO-NATDC .
MOVE ZHMS_TB_SCEN_FLO-TYPED TO
ZHMS_TX_SCEN_FLO-TYPED .
MOVE ZHMS_TB_SCEN_FLO-LOCTP TO
ZHMS_TX_SCEN_FLO-LOCTP .
MOVE ZHMS_TB_SCEN_FLO-SCENA TO
ZHMS_TX_SCEN_FLO-SCENA .
MOVE ZHMS_TB_SCEN_FLO-FLOWD TO
ZHMS_TX_SCEN_FLO-FLOWD .
MOVE SY-LANGU TO
ZHMS_TX_SCEN_FLO-SPRAS .
MOVE ZHMS_VW_SCEN_FLO-MANDT TO
ZHMS_TX_SCEN_FLO-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_SCEN_FLO'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_SCEN_FLO TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_SCEN_FLO'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_SECURITY................................*
FORM GET_DATA_ZHMS_VW_SECURITY.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_SECURITY WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_SECURITY .
ZHMS_VW_SECURITY-MANDT =
ZHMS_TB_SECURITY-MANDT .
ZHMS_VW_SECURITY-USUARIO =
ZHMS_TB_SECURITY-USUARIO .
ZHMS_VW_SECURITY-MONITOR =
ZHMS_TB_SECURITY-MONITOR .
ZHMS_VW_SECURITY-ENTRADA_MANUAL =
ZHMS_TB_SECURITY-ENTRADA_MANUAL .
ZHMS_VW_SECURITY-PORTARIA =
ZHMS_TB_SECURITY-PORTARIA .
ZHMS_VW_SECURITY-CONFERENCIA =
ZHMS_TB_SECURITY-CONFERENCIA .
ZHMS_VW_SECURITY-RELATORIOS =
ZHMS_TB_SECURITY-RELATORIOS .
ZHMS_VW_SECURITY-CONFIGURACOES =
ZHMS_TB_SECURITY-CONFIGURACOES .
ZHMS_VW_SECURITY-ATRIBUICAO =
ZHMS_TB_SECURITY-ATRIBUICAO .
ZHMS_VW_SECURITY-EXECUTAR_FLUXO =
ZHMS_TB_SECURITY-EXECUTAR_FLUXO .
ZHMS_VW_SECURITY-LOG_PROCESSAMENT =
ZHMS_TB_SECURITY-LOG_PROCESSAMENT .
ZHMS_VW_SECURITY-EVENTO_ET =
ZHMS_TB_SECURITY-EVENTO_ET .
ZHMS_VW_SECURITY-VALIDACAO =
ZHMS_TB_SECURITY-VALIDACAO .
ZHMS_VW_SECURITY-CONFIRMA_PORTARI =
ZHMS_TB_SECURITY-CONFIRMA_PORTARI .
ZHMS_VW_SECURITY-CANCELAR_PORTARI =
ZHMS_TB_SECURITY-CANCELAR_PORTARI .
ZHMS_VW_SECURITY-CONF_CONFERENCIA =
ZHMS_TB_SECURITY-CONF_CONFERENCIA .
ZHMS_VW_SECURITY-CANC_CONFERENCIA =
ZHMS_TB_SECURITY-CANC_CONFERENCIA .
ZHMS_VW_SECURITY-NOVA_CONSULTA =
ZHMS_TB_SECURITY-NOVA_CONSULTA .
ZHMS_VW_SECURITY-ENVIO_MDE =
ZHMS_TB_SECURITY-ENVIO_MDE .
ZHMS_VW_SECURITY-DOWNLOAD_XML =
ZHMS_TB_SECURITY-DOWNLOAD_XML .
ZHMS_VW_SECURITY-PESQ_LOG_NOTA =
ZHMS_TB_SECURITY-PESQ_LOG_NOTA .
ZHMS_VW_SECURITY-ESTORNO_MIGO =
ZHMS_TB_SECURITY-ESTORNO_MIGO .
ZHMS_VW_SECURITY-ESTORNO_MIRO =
ZHMS_TB_SECURITY-ESTORNO_MIRO .
ZHMS_VW_SECURITY-MIGO =
ZHMS_TB_SECURITY-MIGO .
ZHMS_VW_SECURITY-MIRO =
ZHMS_TB_SECURITY-MIRO .
ZHMS_VW_SECURITY-J1B1N =
ZHMS_TB_SECURITY-J1B1N .
ZHMS_VW_SECURITY-APROVA_NFS =
ZHMS_TB_SECURITY-APROVA_NFS .
<VIM_TOTAL_STRUC> = ZHMS_VW_SECURITY.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_SECURITY .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_SECURITY.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_SECURITY-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_SECURITY WHERE
  USUARIO = ZHMS_VW_SECURITY-USUARIO .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_SECURITY .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_SECURITY WHERE
  USUARIO = ZHMS_VW_SECURITY-USUARIO .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_SECURITY.
    ENDIF.
ZHMS_TB_SECURITY-MANDT =
ZHMS_VW_SECURITY-MANDT .
ZHMS_TB_SECURITY-USUARIO =
ZHMS_VW_SECURITY-USUARIO .
ZHMS_TB_SECURITY-MONITOR =
ZHMS_VW_SECURITY-MONITOR .
ZHMS_TB_SECURITY-ENTRADA_MANUAL =
ZHMS_VW_SECURITY-ENTRADA_MANUAL .
ZHMS_TB_SECURITY-PORTARIA =
ZHMS_VW_SECURITY-PORTARIA .
ZHMS_TB_SECURITY-CONFERENCIA =
ZHMS_VW_SECURITY-CONFERENCIA .
ZHMS_TB_SECURITY-RELATORIOS =
ZHMS_VW_SECURITY-RELATORIOS .
ZHMS_TB_SECURITY-CONFIGURACOES =
ZHMS_VW_SECURITY-CONFIGURACOES .
ZHMS_TB_SECURITY-ATRIBUICAO =
ZHMS_VW_SECURITY-ATRIBUICAO .
ZHMS_TB_SECURITY-EXECUTAR_FLUXO =
ZHMS_VW_SECURITY-EXECUTAR_FLUXO .
ZHMS_TB_SECURITY-LOG_PROCESSAMENT =
ZHMS_VW_SECURITY-LOG_PROCESSAMENT .
ZHMS_TB_SECURITY-EVENTO_ET =
ZHMS_VW_SECURITY-EVENTO_ET .
ZHMS_TB_SECURITY-VALIDACAO =
ZHMS_VW_SECURITY-VALIDACAO .
ZHMS_TB_SECURITY-CONFIRMA_PORTARI =
ZHMS_VW_SECURITY-CONFIRMA_PORTARI .
ZHMS_TB_SECURITY-CANCELAR_PORTARI =
ZHMS_VW_SECURITY-CANCELAR_PORTARI .
ZHMS_TB_SECURITY-CONF_CONFERENCIA =
ZHMS_VW_SECURITY-CONF_CONFERENCIA .
ZHMS_TB_SECURITY-CANC_CONFERENCIA =
ZHMS_VW_SECURITY-CANC_CONFERENCIA .
ZHMS_TB_SECURITY-NOVA_CONSULTA =
ZHMS_VW_SECURITY-NOVA_CONSULTA .
ZHMS_TB_SECURITY-ENVIO_MDE =
ZHMS_VW_SECURITY-ENVIO_MDE .
ZHMS_TB_SECURITY-DOWNLOAD_XML =
ZHMS_VW_SECURITY-DOWNLOAD_XML .
ZHMS_TB_SECURITY-PESQ_LOG_NOTA =
ZHMS_VW_SECURITY-PESQ_LOG_NOTA .
ZHMS_TB_SECURITY-ESTORNO_MIGO =
ZHMS_VW_SECURITY-ESTORNO_MIGO .
ZHMS_TB_SECURITY-ESTORNO_MIRO =
ZHMS_VW_SECURITY-ESTORNO_MIRO .
ZHMS_TB_SECURITY-MIGO =
ZHMS_VW_SECURITY-MIGO .
ZHMS_TB_SECURITY-MIRO =
ZHMS_VW_SECURITY-MIRO .
ZHMS_TB_SECURITY-J1B1N =
ZHMS_VW_SECURITY-J1B1N .
ZHMS_TB_SECURITY-APROVA_NFS =
ZHMS_VW_SECURITY-APROVA_NFS .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_SECURITY ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_SECURITY .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_SECURITY-UPD_FLAG,
STATUS_ZHMS_VW_SECURITY-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_SECURITY.
  SELECT SINGLE * FROM ZHMS_TB_SECURITY WHERE
USUARIO = ZHMS_VW_SECURITY-USUARIO .
ZHMS_VW_SECURITY-MANDT =
ZHMS_TB_SECURITY-MANDT .
ZHMS_VW_SECURITY-USUARIO =
ZHMS_TB_SECURITY-USUARIO .
ZHMS_VW_SECURITY-MONITOR =
ZHMS_TB_SECURITY-MONITOR .
ZHMS_VW_SECURITY-ENTRADA_MANUAL =
ZHMS_TB_SECURITY-ENTRADA_MANUAL .
ZHMS_VW_SECURITY-PORTARIA =
ZHMS_TB_SECURITY-PORTARIA .
ZHMS_VW_SECURITY-CONFERENCIA =
ZHMS_TB_SECURITY-CONFERENCIA .
ZHMS_VW_SECURITY-RELATORIOS =
ZHMS_TB_SECURITY-RELATORIOS .
ZHMS_VW_SECURITY-CONFIGURACOES =
ZHMS_TB_SECURITY-CONFIGURACOES .
ZHMS_VW_SECURITY-ATRIBUICAO =
ZHMS_TB_SECURITY-ATRIBUICAO .
ZHMS_VW_SECURITY-EXECUTAR_FLUXO =
ZHMS_TB_SECURITY-EXECUTAR_FLUXO .
ZHMS_VW_SECURITY-LOG_PROCESSAMENT =
ZHMS_TB_SECURITY-LOG_PROCESSAMENT .
ZHMS_VW_SECURITY-EVENTO_ET =
ZHMS_TB_SECURITY-EVENTO_ET .
ZHMS_VW_SECURITY-VALIDACAO =
ZHMS_TB_SECURITY-VALIDACAO .
ZHMS_VW_SECURITY-CONFIRMA_PORTARI =
ZHMS_TB_SECURITY-CONFIRMA_PORTARI .
ZHMS_VW_SECURITY-CANCELAR_PORTARI =
ZHMS_TB_SECURITY-CANCELAR_PORTARI .
ZHMS_VW_SECURITY-CONF_CONFERENCIA =
ZHMS_TB_SECURITY-CONF_CONFERENCIA .
ZHMS_VW_SECURITY-CANC_CONFERENCIA =
ZHMS_TB_SECURITY-CANC_CONFERENCIA .
ZHMS_VW_SECURITY-NOVA_CONSULTA =
ZHMS_TB_SECURITY-NOVA_CONSULTA .
ZHMS_VW_SECURITY-ENVIO_MDE =
ZHMS_TB_SECURITY-ENVIO_MDE .
ZHMS_VW_SECURITY-DOWNLOAD_XML =
ZHMS_TB_SECURITY-DOWNLOAD_XML .
ZHMS_VW_SECURITY-PESQ_LOG_NOTA =
ZHMS_TB_SECURITY-PESQ_LOG_NOTA .
ZHMS_VW_SECURITY-ESTORNO_MIGO =
ZHMS_TB_SECURITY-ESTORNO_MIGO .
ZHMS_VW_SECURITY-ESTORNO_MIRO =
ZHMS_TB_SECURITY-ESTORNO_MIRO .
ZHMS_VW_SECURITY-MIGO =
ZHMS_TB_SECURITY-MIGO .
ZHMS_VW_SECURITY-MIRO =
ZHMS_TB_SECURITY-MIRO .
ZHMS_VW_SECURITY-J1B1N =
ZHMS_TB_SECURITY-J1B1N .
ZHMS_VW_SECURITY-APROVA_NFS =
ZHMS_TB_SECURITY-APROVA_NFS .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_SECURITY USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_SECURITY-USUARIO TO
ZHMS_TB_SECURITY-USUARIO .
MOVE ZHMS_VW_SECURITY-MANDT TO
ZHMS_TB_SECURITY-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_SECURITY'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_SECURITY TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_SECURITY'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZHMS_VW_TYPE....................................*
FORM GET_DATA_ZHMS_VW_TYPE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_TYPE WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_TYPE .
ZHMS_VW_TYPE-MANDT =
ZHMS_TB_TYPE-MANDT .
ZHMS_VW_TYPE-NATDC =
ZHMS_TB_TYPE-NATDC .
ZHMS_VW_TYPE-TYPED =
ZHMS_TB_TYPE-TYPED .
ZHMS_VW_TYPE-LOCTP =
ZHMS_TB_TYPE-LOCTP .
ZHMS_VW_TYPE-CODGF =
ZHMS_TB_TYPE-CODGF .
ZHMS_VW_TYPE-ATIVO =
ZHMS_TB_TYPE-ATIVO .
ZHMS_VW_TYPE-MONITOR =
ZHMS_TB_TYPE-MONITOR .
    SELECT SINGLE * FROM ZHMS_TX_TYPE WHERE
NATDC = ZHMS_TB_TYPE-NATDC AND
TYPED = ZHMS_TB_TYPE-TYPED AND
LOCTP = ZHMS_TB_TYPE-LOCTP AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_TYPE-DENOM =
ZHMS_TX_TYPE-DENOM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZHMS_VW_TYPE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_TYPE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_TYPE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_TYPE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_TYPE WHERE
  NATDC = ZHMS_VW_TYPE-NATDC AND
  TYPED = ZHMS_VW_TYPE-TYPED AND
  LOCTP = ZHMS_VW_TYPE-LOCTP .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_TYPE .
    ENDIF.
    DELETE FROM ZHMS_TX_TYPE WHERE
    NATDC = ZHMS_TB_TYPE-NATDC AND
    TYPED = ZHMS_TB_TYPE-TYPED AND
    LOCTP = ZHMS_TB_TYPE-LOCTP .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_TYPE WHERE
  NATDC = ZHMS_VW_TYPE-NATDC AND
  TYPED = ZHMS_VW_TYPE-TYPED AND
  LOCTP = ZHMS_VW_TYPE-LOCTP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_TYPE.
    ENDIF.
ZHMS_TB_TYPE-MANDT =
ZHMS_VW_TYPE-MANDT .
ZHMS_TB_TYPE-NATDC =
ZHMS_VW_TYPE-NATDC .
ZHMS_TB_TYPE-TYPED =
ZHMS_VW_TYPE-TYPED .
ZHMS_TB_TYPE-LOCTP =
ZHMS_VW_TYPE-LOCTP .
ZHMS_TB_TYPE-CODGF =
ZHMS_VW_TYPE-CODGF .
ZHMS_TB_TYPE-ATIVO =
ZHMS_VW_TYPE-ATIVO .
ZHMS_TB_TYPE-MONITOR =
ZHMS_VW_TYPE-MONITOR .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_TYPE ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_TYPE .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZHMS_TX_TYPE WHERE
    NATDC = ZHMS_TB_TYPE-NATDC AND
    TYPED = ZHMS_TB_TYPE-TYPED AND
    LOCTP = ZHMS_TB_TYPE-LOCTP AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZHMS_TX_TYPE.
ZHMS_TX_TYPE-NATDC =
ZHMS_TB_TYPE-NATDC .
ZHMS_TX_TYPE-TYPED =
ZHMS_TB_TYPE-TYPED .
ZHMS_TX_TYPE-LOCTP =
ZHMS_TB_TYPE-LOCTP .
ZHMS_TX_TYPE-SPRAS =
SY-LANGU .
      ENDIF.
ZHMS_TX_TYPE-DENOM =
ZHMS_VW_TYPE-DENOM .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TX_TYPE ##WARN_OK.
    ELSE.
    INSERT ZHMS_TX_TYPE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_TYPE-UPD_FLAG,
STATUS_ZHMS_VW_TYPE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_TYPE.
  SELECT SINGLE * FROM ZHMS_TB_TYPE WHERE
NATDC = ZHMS_VW_TYPE-NATDC AND
TYPED = ZHMS_VW_TYPE-TYPED AND
LOCTP = ZHMS_VW_TYPE-LOCTP .
ZHMS_VW_TYPE-MANDT =
ZHMS_TB_TYPE-MANDT .
ZHMS_VW_TYPE-NATDC =
ZHMS_TB_TYPE-NATDC .
ZHMS_VW_TYPE-TYPED =
ZHMS_TB_TYPE-TYPED .
ZHMS_VW_TYPE-LOCTP =
ZHMS_TB_TYPE-LOCTP .
ZHMS_VW_TYPE-CODGF =
ZHMS_TB_TYPE-CODGF .
ZHMS_VW_TYPE-ATIVO =
ZHMS_TB_TYPE-ATIVO .
ZHMS_VW_TYPE-MONITOR =
ZHMS_TB_TYPE-MONITOR .
    SELECT SINGLE * FROM ZHMS_TX_TYPE WHERE
NATDC = ZHMS_TB_TYPE-NATDC AND
TYPED = ZHMS_TB_TYPE-TYPED AND
LOCTP = ZHMS_TB_TYPE-LOCTP AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZHMS_VW_TYPE-DENOM =
ZHMS_TX_TYPE-DENOM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZHMS_VW_TYPE-DENOM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_TYPE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_TYPE-NATDC TO
ZHMS_TB_TYPE-NATDC .
MOVE ZHMS_VW_TYPE-TYPED TO
ZHMS_TB_TYPE-TYPED .
MOVE ZHMS_VW_TYPE-LOCTP TO
ZHMS_TB_TYPE-LOCTP .
MOVE ZHMS_VW_TYPE-MANDT TO
ZHMS_TB_TYPE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_TYPE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_TYPE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_TYPE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZHMS_TB_TYPE-NATDC TO
ZHMS_TX_TYPE-NATDC .
MOVE ZHMS_TB_TYPE-TYPED TO
ZHMS_TX_TYPE-TYPED .
MOVE ZHMS_TB_TYPE-LOCTP TO
ZHMS_TX_TYPE-LOCTP .
MOVE SY-LANGU TO
ZHMS_TX_TYPE-SPRAS .
MOVE ZHMS_VW_TYPE-MANDT TO
ZHMS_TX_TYPE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TX_TYPE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TX_TYPE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TX_TYPE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...not in TVDIR: ZHMS_VW_MAP_LAY...............................*
FORM GET_DATA_ZHMS_VW_MAP_LAY.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZHMS_TB_MAP_LAY WHERE
(VIM_WHERETAB) .
    CLEAR ZHMS_VW_MAP_LAY .
ZHMS_VW_MAP_LAY-MANDT =
ZHMS_TB_MAP_LAY-MANDT .
ZHMS_VW_MAP_LAY-NATDC =
ZHMS_TB_MAP_LAY-NATDC .
ZHMS_VW_MAP_LAY-TYPED =
ZHMS_TB_MAP_LAY-TYPED .
ZHMS_VW_MAP_LAY-LOCTP =
ZHMS_TB_MAP_LAY-LOCTP .
ZHMS_VW_MAP_LAY-EVENT =
ZHMS_TB_MAP_LAY-EVENT .
ZHMS_VW_MAP_LAY-VERSN =
ZHMS_TB_MAP_LAY-VERSN .
ZHMS_VW_MAP_LAY-SEQNR =
ZHMS_TB_MAP_LAY-SEQNR .
ZHMS_VW_MAP_LAY-MNEUM =
ZHMS_TB_MAP_LAY-MNEUM .
ZHMS_VW_MAP_LAY-TABDE =
ZHMS_TB_MAP_LAY-TABDE .
ZHMS_VW_MAP_LAY-CAPDE =
ZHMS_TB_MAP_LAY-CAPDE .
ZHMS_VW_MAP_LAY-ROTIN =
ZHMS_TB_MAP_LAY-ROTIN .
ZHMS_VW_MAP_LAY-ECHAV =
ZHMS_TB_MAP_LAY-ECHAV .
<VIM_TOTAL_STRUC> = ZHMS_VW_MAP_LAY.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZHMS_VW_MAP_LAY .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZHMS_VW_MAP_LAY.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZHMS_VW_MAP_LAY-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAP_LAY WHERE
  NATDC = ZHMS_VW_MAP_LAY-NATDC AND
  TYPED = ZHMS_VW_MAP_LAY-TYPED AND
  LOCTP = ZHMS_VW_MAP_LAY-LOCTP AND
  EVENT = ZHMS_VW_MAP_LAY-EVENT AND
  VERSN = ZHMS_VW_MAP_LAY-VERSN AND
  SEQNR = ZHMS_VW_MAP_LAY-SEQNR .
    IF SY-SUBRC = 0.
    DELETE ZHMS_TB_MAP_LAY .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZHMS_TB_MAP_LAY WHERE
  NATDC = ZHMS_VW_MAP_LAY-NATDC AND
  TYPED = ZHMS_VW_MAP_LAY-TYPED AND
  LOCTP = ZHMS_VW_MAP_LAY-LOCTP AND
  EVENT = ZHMS_VW_MAP_LAY-EVENT AND
  VERSN = ZHMS_VW_MAP_LAY-VERSN AND
  SEQNR = ZHMS_VW_MAP_LAY-SEQNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZHMS_TB_MAP_LAY.
    ENDIF.
ZHMS_TB_MAP_LAY-MANDT =
ZHMS_VW_MAP_LAY-MANDT .
ZHMS_TB_MAP_LAY-NATDC =
ZHMS_VW_MAP_LAY-NATDC .
ZHMS_TB_MAP_LAY-TYPED =
ZHMS_VW_MAP_LAY-TYPED .
ZHMS_TB_MAP_LAY-LOCTP =
ZHMS_VW_MAP_LAY-LOCTP .
ZHMS_TB_MAP_LAY-EVENT =
ZHMS_VW_MAP_LAY-EVENT .
ZHMS_TB_MAP_LAY-VERSN =
ZHMS_VW_MAP_LAY-VERSN .
ZHMS_TB_MAP_LAY-SEQNR =
ZHMS_VW_MAP_LAY-SEQNR .
ZHMS_TB_MAP_LAY-MNEUM =
ZHMS_VW_MAP_LAY-MNEUM .
ZHMS_TB_MAP_LAY-TABDE =
ZHMS_VW_MAP_LAY-TABDE .
ZHMS_TB_MAP_LAY-CAPDE =
ZHMS_VW_MAP_LAY-CAPDE .
ZHMS_TB_MAP_LAY-ROTIN =
ZHMS_VW_MAP_LAY-ROTIN .
ZHMS_TB_MAP_LAY-ECHAV =
ZHMS_VW_MAP_LAY-ECHAV .
    IF SY-SUBRC = 0.
    UPDATE ZHMS_TB_MAP_LAY ##WARN_OK.
    ELSE.
    INSERT ZHMS_TB_MAP_LAY .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZHMS_VW_MAP_LAY-UPD_FLAG,
STATUS_ZHMS_VW_MAP_LAY-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZHMS_VW_MAP_LAY.
  SELECT SINGLE * FROM ZHMS_TB_MAP_LAY WHERE
NATDC = ZHMS_VW_MAP_LAY-NATDC AND
TYPED = ZHMS_VW_MAP_LAY-TYPED AND
LOCTP = ZHMS_VW_MAP_LAY-LOCTP AND
EVENT = ZHMS_VW_MAP_LAY-EVENT AND
VERSN = ZHMS_VW_MAP_LAY-VERSN AND
SEQNR = ZHMS_VW_MAP_LAY-SEQNR .
ZHMS_VW_MAP_LAY-MANDT =
ZHMS_TB_MAP_LAY-MANDT .
ZHMS_VW_MAP_LAY-NATDC =
ZHMS_TB_MAP_LAY-NATDC .
ZHMS_VW_MAP_LAY-TYPED =
ZHMS_TB_MAP_LAY-TYPED .
ZHMS_VW_MAP_LAY-LOCTP =
ZHMS_TB_MAP_LAY-LOCTP .
ZHMS_VW_MAP_LAY-EVENT =
ZHMS_TB_MAP_LAY-EVENT .
ZHMS_VW_MAP_LAY-VERSN =
ZHMS_TB_MAP_LAY-VERSN .
ZHMS_VW_MAP_LAY-SEQNR =
ZHMS_TB_MAP_LAY-SEQNR .
ZHMS_VW_MAP_LAY-MNEUM =
ZHMS_TB_MAP_LAY-MNEUM .
ZHMS_VW_MAP_LAY-TABDE =
ZHMS_TB_MAP_LAY-TABDE .
ZHMS_VW_MAP_LAY-CAPDE =
ZHMS_TB_MAP_LAY-CAPDE .
ZHMS_VW_MAP_LAY-ROTIN =
ZHMS_TB_MAP_LAY-ROTIN .
ZHMS_VW_MAP_LAY-ECHAV =
ZHMS_TB_MAP_LAY-ECHAV .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZHMS_VW_MAP_LAY USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZHMS_VW_MAP_LAY-NATDC TO
ZHMS_TB_MAP_LAY-NATDC .
MOVE ZHMS_VW_MAP_LAY-TYPED TO
ZHMS_TB_MAP_LAY-TYPED .
MOVE ZHMS_VW_MAP_LAY-LOCTP TO
ZHMS_TB_MAP_LAY-LOCTP .
MOVE ZHMS_VW_MAP_LAY-EVENT TO
ZHMS_TB_MAP_LAY-EVENT .
MOVE ZHMS_VW_MAP_LAY-VERSN TO
ZHMS_TB_MAP_LAY-VERSN .
MOVE ZHMS_VW_MAP_LAY-SEQNR TO
ZHMS_TB_MAP_LAY-SEQNR .
MOVE ZHMS_VW_MAP_LAY-MANDT TO
ZHMS_TB_MAP_LAY-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZHMS_TB_MAP_LAY'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZHMS_TB_MAP_LAY TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZHMS_TB_MAP_LAY'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .
